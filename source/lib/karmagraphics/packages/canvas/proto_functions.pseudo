/*PROTOTYPE_FUNCTION*/  /*
void CANVAS_PROTO_refresh_func (KWorldCanvas canvas, int width, int height,
				struct win_scale_type *win_scale,
				Kcolourmap cmap, flag cmap_resize, void **info,
				PostScriptPage pspage,
				unsigned int num_areas,
				KPixCanvasRefreshArea *areas,
				flag *honoured_areas)
    [SUMMARY] Refresh event callback.
    [PURPOSE] This routine is a refresh event consumer for a world canvas.
    <canvas> The world canvas being refreshed.
    <width> The width of the canvas in pixels.
    <height> The height of the canvas in pixels.
    <win_scale> A pointer to the window scaling information.
    <cmap> The colourmap associated with the canvas.
    <cmap_resize> TRUE if the refresh function was called as a result of a
    colourmap resize, else FALSE.
    <info> A pointer to the arbitrary canvas information pointer.
    <pspage> If not NULL, the PostScriptPage object the refresh is
    redirected to.
    <num_areas> The number of areas that need to be refreshed. If this is
    0 then the entire pixel canvas needs to be refreshed.
    <areas> The list of areas that need to be refreshed. Note that these
    areas are given in pixel co-ordinates.
    <honoured_areas> If the value TRUE is written here it is assumed the
    routine honoured the list of refresh areas and did not write outside
    these areas and hence the list of areas will be passed to subsequent
    registered refresh routines. If FALSE is written here (or nothing is
    written here), implying the routine refreshed the entire canvas,
    subsequent refresh routines will be told to refresh the entire canvas.
    [RETURNS] Nothing.
*/

/*PROTOTYPE_FUNCTION*/  /*
void CANVAS_PROTO_size_control_func (KWorldCanvas canvas,
				     int width, int height,
				     struct win_scale_type *win_scale,
				     void **info, flag *boundary_clear)
    [SUMMARY] Size control callback.
    [PURPOSE] This routine will modify the window scaling information for a
    world canvas. While this routine is running, colourmap resize events are
    ignored. Hence this routine may safely cause the associated Kcolourmap
    object to be resized.
    <canvas> The world canvas object.
    <width> The width of the canvas in pixels.
    <height> The height of the canvas in pixels.
    <win_scale> The window scaling information. This may be modified.
    <info> A pointer to the arbitrary canvas information pointer.
    <boundary_clear> If the value TRUE is written here then the
    [<canvas_resize>] routine will attempt to clear only the boundary between
    the pixel canvas and the world canvas. If the value FALSE is written here
    or nothing is written here, the [<canvas_resize>] routine will clear the
    entire pixel canvas as appropriate.
    [RETURNS] Nothing.
*/

/*PROTOTYPE_FUNCTION*/  /*
flag CANVAS_PROTO_position_func (KWorldCanvas canvas, double x, double y,
				 unsigned int event_code, void *e_info,
				 void **f_info, double x_lin, double y_lin)
    [SUMMARY] Position event callback.
    [PURPOSE] This routine is a position event consumer for a world canvas.
    <canvas> The canvas on which the event occurred.
    <x> The horizontal world co-ordinate of the event.
    <y> The vertical world co-ordinate of the event.
    [NOTE] These values will have been transformed by the registered
    transform function (see [<canvas_register_transform_func>]).
    <event_code> The arbitrary event code.
    <e_info> A pointer to arbitrary event information.
    <f_info> A pointer to an arbitrary function information pointer.
    <x_lin> The horizontal linear world co-ordinate prior to the transform
    function being called.
    <y_lin> The vertical linear world co-ordinate prior to the transform
    function being called.
    [RETURNS] TRUE if the event was consumed, else FALSE indicating that
    the event is still to be processed.
*/

/*PROTOTYPE_FUNCTION*/  /*
flag CANVAS_PROTO_coord_convert_func (KWorldCanvas canvas,
				      struct win_scale_type *win_scale,
				      double *x, double *y,
				      flag to_world, void **info)
    [SUMMARY] Co-ordinate conversion callback.
    [PURPOSE] This routine will convert between world co-ordinates and pixel
    co-ordinates for a world canvas.
    <canvas> The canvas.
    <win_scale> A pointer to the window scaling information. The data
    herein may be modified.
    <x> A pointer to the horizontal co-ordinate storage. This is updated.
    <y> A pointer to the vertical co-ordinate storage. This is updated.
    <to_world> If TRUE, then a pixel to world co-ordinate transform is
    required, else a world to pixel co-ordinate transform is required.
    <info> A pointer to the arbitrary canvas information pointer.
    [RETURNS] TRUE if the conversion was completed, else FALSE indicating
    that the default conversions should be used.
*/

/*PROTOTYPE_FUNCTION*/  /*
void CANVAS_PROTO_coord_transform_func (KWorldCanvas canvas,
					unsigned int num_coords,
					double *x, flag x_to_linear,
					double *y, flag y_to_linear,
					double left_x, double right_x,
					double bottom_y, double top_y,
					void **info)
    [SUMMARY] Co-ordinate transformation callback.
    [PURPOSE] This routine will transform between linear and non-linear world
    co-ordinates.
    <canvas> The canvas on which the event occurred.
    <num_coords> The number of co-ordinates to transform.
    <x> The array of horizontal world co-ordinates. These are modified.
    <x_to_linear> If TRUE, then the horizontal co-ordinates are converted from
    non-linear to linear, else they are converted from linear to non-linear.
    <y> The array of vertical world co-ordinates. These are modified.
    <y_to_linear> If TRUE, then the vertical co-ordinates are converted from
    non-linear to linear, else they are converted from linear to non-linear.
    <info> A pointer to the arbitrary transform information pointer.
    [RETURNS] Nothing.
*/
