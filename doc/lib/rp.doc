/*  Link with:    -lkarma  */
/*  This file describes the md_ package of routines in the Karma library.

    These routines are meant to provide management of cryptographically strong
    random pools of bytes. Partially random data (entropy) may be added and
    extracted from a pool. As data is added, the pool is stirred to randomly
    distribute the bits. Data extracted from a random pool may be used in the
    generation of unpredictable (secure) session keys for cryptographic
    algorithms.


    Written by		Richard Gooch	13-Dec-1994

    Last updated by	Richard Gooch	13-Dec-1994


*/

RandPool rp_create ( unsigned int size, unsigned int hash_digest_size,
		    unsigned int hash_block_size, void (*hash_func) () )
/*  This routine will create a random pool of bytes to which random data may be
    subsequently added or extracted. The pool is initialised with pseudo-random
    data (which is *not* cryptographically secure). When data is added to the
    pool, the pool is stirred using a supplied hash function.
    The size of the pool must be given by  size  .
    The size of the hash buffer must be given by  hash_digest_size
    The size of the hash block must be given by  hash_block_size  .
    The hash function must be pointed to by  hash_func  .
    The interface to this function is given below:

    void hash_func (buffer, block)
    *   This routine is called when a hash buffer must be scrambled with a
        block of data.
	The hash buffer will be pointed to by  buffer  .
	The block to add to the hash buffer data will be pointed to by
	block  .
	The routine returns nothing.
    *
    unsigned char buffer[hash_digest_size];
    CONST unsigned char block[hash_block_size];

    The routine returns a RandPool object on success, else it returns NULL.
*/
/*---------------------------------------------------------------------------*/

void rp_add_bytes (RandPool rp, CONST unsigned char *buf, unsigned int length)
/*  This routine will add bytes of data (entropy) into a pool. The pool is then
    stirred using it's registered hash function in order to distribute the bits
    The random pool must be given by  rp  .
    The bytes to add to the pool must be pointed to by  buf  .
    The number of bytes to add to the pool must be given by  length  .
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

void rp_get_bytes (RandPool rp, unsigned char *buf, unsigned int length)
/*  This routine will get bytes of data from a random pool.
    The random pool must be given by  rp  .
    The bytes to get from the pool will be written to the storage pointed to by
    buf  .
    The number of bytes to get from the pool must be given by  length  .
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

void rp_destroy (RandPool rp)
/*  This routine will destroy a random pool of bytes, erasing all information.
    The random pool must be given by  rp  .
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

void rp_destroy_all ()
/*  This routine will destroy all randpools.
    The routine is meant to be called from the exit(3) function. It should be
    called by the application prior to  execve(2)  .
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

void rp_add_time_noise (RandPool rp)
/*  This routine will add bytes of data (entropy) into a pool, derived from the
    system time. It is suggested that this routine be called by various
    callback routines to assist in the addition of entropy.
    The random pool must be given by  rp  .
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

void rp_register_destroy_func (RandPool rp, void (*destroy_func) (),void *info)
/*  This routine will register a routine which should be called when a
    random pool is destroyed.
    The random pool must be given by  rp  .

    The function which is called when the random pool is destroyed must be
    pointed to by  destroy_func  .
    The interface to this function is given below:

    void destroy_func (rp, info)
    *   This routine is called when a random pool is destroyed.
        The random pool will be given by  rp  .
	The arbitrary information pointer will be given by  info  .
	The routine returns nothing.
    *
    RandPool rp;
    void *info;

    Multiple destroy functions may be registered, with the first one registered
    being the first one called upon destroy.

    The arbitrary information passed to the destroy function must be pointed to
    by  info  .This may be NULL.
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/
