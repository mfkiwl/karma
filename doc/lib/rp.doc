$PACKAGE          rp
$SUMMARY          Routines to manage cryptographically strong random pools
$PURPOSE
    These routines are meant to provide management of cryptographically strong
    random pools of bytes. Partially random data (entropy) may be added and
    extracted from a pool. As data is added, the pool is stirred to randomly
    distribute the bits. Data extracted from a random pool may be used in the
    generation of unpredictable (secure) session keys for cryptographic
    algorithms.
$LIBRARY          karma
$LINKWITH         -lkarma
$END

$FUNCTION           rp_create
$RETURN_TYPE        RandPool
$PARAMETER_LIST
    ( unsigned int size, unsigned int hash_digest_size,
		    unsigned int hash_block_size, void (*hash_func) () )
$SUMMARY            Create a pool of random bytes.
$PURPOSE
    This routine will create a random pool of bytes to which random
    data may be subsequently added or extracted. The pool is initialised with
    pseudo-random data (which is *not* cryptographically secure). When data is
    added to the pool, the pool is stirred using a supplied hash function.
    Bytes extracted from the pool should be cryptographically secure.
$PARAMETER          size :
    The size of the pool.
$PARAMETER          hash_digest_size :
    The size of the hash buffer.
$PARAMETER          hash_block_size :
    The size of the hash block.
$PARAMETER          hash_func :
    The hash function. The prototype function is
    <-RP_PROTO_hash_func->.
$RETURNS
    A RandPool object on success, else NULL.
$END

$FUNCTION           rp_add_bytes
$RETURN_TYPE        void
$PARAMETER_LIST
    (RandPool rp, CONST unsigned char *buf, unsigned int length)
$SUMMARY            Add bytes (entropy) to a random pool.
$PURPOSE
    This routine will add bytes of data (entropy) into a pool. The
    pool is then stirred using it's registered hash function in order to
    distribute the bits.
$PARAMETER          rp :
    The random pool.
$PARAMETER          buf :
    The bytes to add to the pool.
$PARAMETER          length :
    The number of bytes to add to the pool.
$RETURNS
    Nothing.
$END

$FUNCTION           rp_get_bytes
$RETURN_TYPE        void
$PARAMETER_LIST
    (RandPool rp, unsigned char *buf, unsigned int length)
$SUMMARY            Get bytes of data from a random pool.
$PURPOSE
    Get bytes of data from a random pool.
$PARAMETER          rp :
    The random pool.
$PARAMETER          buf :
    The bytes to get from the pool will be written here. These bytes
    should be random an cryptographically secure.
$PARAMETER          length :
    The number of bytes to get from the pool.
$RETURNS
    Nothing.
$END

$FUNCTION           rp_destroy
$RETURN_TYPE        void
$PARAMETER_LIST
    (RandPool rp)
$SUMMARY            Destroy a random pool of bytes, erasing all information.
$PURPOSE
    Destroy a random pool of bytes, erasing all information.
$PARAMETER          rp :
    The random pool.
$RETURNS
    Nothing.
$END

$FUNCTION           rp_destroy_all
$RETURN_TYPE        void
$PARAMETER_LIST
    ()
$SUMMARY            Destroy all randpools.
$PURPOSE
    This routine will destroy all randpools. The routine is meant to
    be called from the <<exit(3)>> function. It should also be called by the
    application prior to <<execve(2)>>.
$RETURNS
    Nothing.
$END

$FUNCTION           rp_add_time_noise
$RETURN_TYPE        void
$PARAMETER_LIST
    (RandPool rp)
$SUMMARY            Add time-based entropy to a randpool.
$PURPOSE
    This routine will add bytes of data (entropy) into a pool,
    derived from the system time. It is suggested that this routine be called
    by various callback routines to assist in the addition of entropy.
$PARAMETER          rp :
    The random pool.
$RETURNS
    Nothing.
$END

$FUNCTION           rp_register_destroy_func
$RETURN_TYPE        void
$PARAMETER_LIST
    (RandPool rp, void (*destroy_func) (),void *info)
$SUMMARY            Register randpool destroy callback.
$PURPOSE
    This routine will register a routine which should be called when
    a random pool is destroyed.
$PARAMETER          rp :
    The random pool.
$PARAMETER          destroy_func :
    The function which is called when the random pool is
    destroyed. The prototype function is <-RP_PROTO_destroy_func->.
    Multiple destroy functions may be registered, with the first one registered
    being the first one called upon destroy.
$PARAMETER          info :
    A pointer to the arbitrary information passed to the destroy
    function. This may be NULL.
$RETURNS
    Nothing.
$END

$PROTO_FUNC         RP_PROTO_hash_func
$RETURN_TYPE        void
$PARAMETER_LIST
    (unsigned char buffer[hash_digest_size],
			 CONST unsigned char block[hash_block_size];)
$SUMMARY            Hash callback.
$PURPOSE
    This routine is called when a hash buffer must be scrambled with
    a block of data.
$PARAMETER          buffer :
    The hash buffer.
$PARAMETER          block :
    The block to add to the hash buffer data.
$RETURNS
    Nothing.
$END

$PROTO_FUNC         RP_PROTO_destroy_func
$RETURN_TYPE        void
$PARAMETER_LIST
    (RandPool rp, void *info)
$SUMMARY            Destroy callback.
$PURPOSE
    This routine is called when a random pool is destroyed.
$PARAMETER          rp :
    The random pool.
$PARAMETER          info :
    The arbitrary information pointer.
$RETURNS
    Nothing.
$END
