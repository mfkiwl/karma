$PACKAGE          t
$SUMMARY          Low level Transform routines
$PURPOSE
    These routines are meant to provide a low level mechanism to perform
    mathematical transformations on data. For example, low level Fast Fourier
    Transforms are supplied in this package.
$LIBRARY          karma
$LINKWITH         -lkarma
$END

$FUNCTION           t_c_to_c_1D_fft_float
$RETURN_TYPE        unsigned int
$PARAMETER_LIST
    (float *real, float *imag,
				    unsigned int length, unsigned int stride,
				    int direction)
$SUMMARY            Compute a 1D complex to complex single precision FFT.
$PURPOSE
    This routine will perform a complex to complex 1 dimensional FFT
    on an array of single precision complex data.
    The routine performs the transform in situ.
$PARAMETER          real :
    The array of real components. This is modified.
$PARAMETER          imag :
    The array of imaginary components. This is modified.
$PARAMETER          length :
    The number of complex values in the array to transform.
$PARAMETER          stride :
    The stride (in bytes) of successive components.
$PARAMETER          direction :
    If the value is KARMA_FFT_FORWARD, the forward transform is
    performed. If the value is KARMA_FFT_INVERSE, the inverse transform is
    performed.
$RETURNS
    A value indicating the success / failure status of the transform.
    See <-T_FFT_STATUS-> for a list of possible values.
$END

$FUNCTION           t_c_to_c_many_1D_fft_float
$RETURN_TYPE        unsigned int
$PARAMETER_LIST
    (float *real, float *imag,
					 unsigned int length,
					 unsigned int elem_stride,
					 unsigned int number,
					 unsigned int dim_stride,
					 int direction)
$SUMMARY            Compute many 1D complex to complex single precision FFTs.
$PURPOSE
    This routine will perform a number of complex to complex 1
    dimensional FFTs on an array of single precision complex data.
    The routine performs the transforms in situ.
$PARAMETER          real :
    The array of real components.
$PARAMETER          imag :
    The array of imaginary components.
$PARAMETER          length :
    The number of complex values in the array to transform.
$PARAMETER          elem_stride :
    The stride (in bytes) of successive components.
$PARAMETER          number :
    The number of 1 dimensional FFTs to perform.
$PARAMETER          dim_stride :
    The stride (in bytes) between successive data sets.
$PARAMETER          direction :
    If the value is KARMA_FFT_FORWARD, the forward transform is
    performed. If the value is KARMA_FFT_INVERSE, the inverse transform is
    performed.
$RETURNS
    A value indicating the success / failure status of the transform.
    See <-T_FFT_STATUS-> for a list of possible values.
$END

$FUNCTION           t_check_power_of_2
$RETURN_TYPE        flag
$PARAMETER_LIST
    (unsigned int number)
$SUMMARY            Check if a number is a power of 2.
$PURPOSE
    Check if a number is a power of 2.
$PARAMETER          number :
    The number.
$RETURNS
    TRUE if the number is a power of 2, else FALSE.
$END

$FUNCTION           t_r_to_c_many_1D_fft_float
$RETURN_TYPE        unsigned int
$PARAMETER_LIST
    (float *a, unsigned int length,
					 unsigned int elem_stride,
					 unsigned int number,
					 unsigned int dim_stride,
					 int direction)
$SUMMARY            Compute many 1D real to complex single precision FFTs.
$PURPOSE
    This routine will perform a real to complex or complex to real
    FFT.
$PARAMETER          a :
    The array.
$PARAMETER          n :
    The number of elements to transform.
$PARAMETER          elem_stride :
    The stride (in floats) of sucessive data elements.
$PARAMETER          number :
    The number of transforms to perform.
$PARAMETER          dim_stride :
    The stride (in floats) between sucessive data sets.
$PARAMETER          direction :
    If the value is KARMA_FFT_FORWARD, the forward, real to complex
    transform is performed. If the value is KARMA_FFT_INVERSE, the inverse,
    complex to real transform is performed.
$RETURNS
    A value indicating the success / failure status of the transform.
    See <-T_FFT_STATUS-> for a list of possible values.
$END

$TABLE            T_FFT_STATUS
$COLUMNS          2
$SUMMARY          List of FFT status values
$TABLE_DATA
|.Name                              |,Meaning
|.
|.KARMA_FFT_OK                      |,Transform successful
|.KARMA_FFT_BAD_LENGTH              |,Bad length supplied
|.KARMA_FFT_BAD_TYPE                |,Bad data type
|.KARMA_FFT_ALLOC_ERROR             |,Internal allocation error
|.KARMA_FFT_METHOD_NOT_AVAILABLE    |,Method not available
|.KARMA_FFT_BAD_STRIDE              |,Bad stride
$END
