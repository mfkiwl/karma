/*  Link with:    -lkarma  */
/*  This file describes the s_ package of routines in the Karma library.

    These routines are meant to provide a simplified interface to the Unix
    signal management routines. These routines allow blocking and unblocking
    of signals without the dangers of deadlock (common on multi-threaded
    machines).
    A few "standard" signal handlers are also provided.


    Written by		Richard Gooch	13-Dec-1994

    Last updated by	Richard Gooch	13-Dec-1994


*/

void s_block (signal)
/*  This routine will cause a signal to be blocked until a subsequent call to
    s_unblock  or  s_unblock_all  .If the signal is already blocked,
    no action is taken.
    The signal to block must be given by  signal  .
    The routine returns nothing.
*/
int signal;
/*---------------------------------------------------------------------------*/

void s_unblock (signal)
/*  This routine will cause a signal to be unblocked. If the signal is not
    already blocked, no action is taken.
    The signal to unblock must be given by  signal  .
    Note that the signal will only be unblocked if previously blocked by a call
    to  s_block  .
    The routine returns nothing.
*/
int signal;
/*---------------------------------------------------------------------------*/

void s_unblock_all ()
/*  This routine will cause all signals blocked by  s_block  to be
    unblocked. If no signals were blocked, no action is taken.
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

void *s_ignore (sig)
/*  This routine will cause a signal to be ignored.
    The signal to ignore must be given by  sig  .
    The routine returns the previous signal handler.
*/
int sig;
/*---------------------------------------------------------------------------*/

void s_int_handler ()
/*  This routine will handle SIGINT signals (those generated by the C shell in
    response to a control C keypress).
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

void s_term_handler ()
/*  This routine will handle SIGTERM signals.
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

flag s_check_for_int ()
/*  This routine will check if there is a queued interrupt (SIGINT) pending.
    The routine returns TRUE if there is a queued SIGINT, else it returns FALSE
*/
/*---------------------------------------------------------------------------*/
