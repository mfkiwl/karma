$PACKAGE          cm
$SUMMARY          Routines to manage child processes
$PURPOSE
    These routines are meant to provide a generic and simple to use child
    process management facility.
    A similar set of routines: <-chx_-> provide identical functionality
    (with the exception of the polling routine), except that they rely on the
    Xt Intrinsics.
$LIBRARY          karma
$LINKWITH         -lkarma
$END

$FUNCTION         cm_manage
$RETURN_TYPE      flag
$PARAMETER_LIST
    ( int pid, void (*stop_func) (), void (*term_func) (),
		void (*exit_func) () )
$SUMMARY          Register a function to manage a child process.
$PURPOSE
    This routine will manage a child process for state changes by
    registering callback routines.
$PARAMETER        pid :
    The child process ID to manage.
$PARAMETER        stop_func :
    This routine is called when the child is stopped (by a SIGTTIN,
    SIGTTOU, SIGTSTP, or SIGSTOP signal). If this is NULL, no callback routine
    is installed. The prototype function is <-CM_PROTO_stop_func->
$PARAMETER        term_func :
    This routine is called when the child terminates due to a
    signal. If this is NULL, no callback routine is installed. The prototype
    function is <-CM_PROTO_term_func->.
$PARAMETER        exit_func :
    This routine is called when the child exits due to a call to
    <<_exit>>. If this is NULL, no callback routine is installed. The prototype
    function is <-CM_PROTO_exit_func->.
$NOTE
    If a child process is killed or exits, its callback routines are
    automatically removed. The <<term_func>> or <<exit_func>> MUST NOT unmanage
    the child process.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         cm_unmanage
$RETURN_TYPE      void
$PARAMETER_LIST
    (int pid)
$SUMMARY          Terminate the management of a child process for state changes.
$PURPOSE
    Terminate the management of a child process for state changes.
$PARAMETER        pid :
    The ID of the child process to unmanage.
$RETURNS
    Nothing.
$END

$FUNCTION         cm_poll
$RETURN_TYPE      void
$PARAMETER_LIST
    (flag block)
$SUMMARY          Poll for child process state changes.
$PURPOSE
    This routine will poll for any change in status of child
    processes. If the operating system does not support forking, the routine
    displays an error message. Those processes which have been registered using
    <-cm_manage-> will have any callback routines called. If a child has not
    been registered using <-cm_manage-> then the routine will print a warning
    message stating that the child was not managed.
$PARAMETER        block :
    If TRUE, the routine will poll forever until a child changes status
    or a signal is caught.
$NOTE
    If the process has no children, the routine will ALWAYS return
    immediately.
$RETURNS
    Nothing.
$END

$FUNCTION         cm_poll_silent
$RETURN_TYPE      void
$PARAMETER_LIST
    (flag block)
$SUMMARY          Poll for child process state changes.
$PURPOSE
    This routine will poll for any change in status of child
    processes. If the operating system does not support forking, the routine
    displays an error message. Those processes which have been registered using
    <-cm_manage-> will have any callback routines called. If a child has not
    been registered using <-cm_manage-> then the routine will print a warning
    message stating that the child was not managed.
$PARAMETER        block :
    If TRUE, the routine will poll forever until a child changes status
    or a signal is caught.
$NOTE
    If the process has no children, the routine will ALWAYS return
    immediately.
$RETURNS
    Nothing.
$END

$PROTO_FUNC       CM_PROTO_stop_func
$RETURN_TYPE      void
$PARAMETER_LIST
    (int pid, int sig)
$SUMMARY          This routine is called when a child process is stopped.
$PURPOSE
    This routine is called when a child process is stopped.
$PARAMETER        pid :
    The process ID.
$PARAMETER        sig :
    The signal which stopped the process.
$RETURNS
    Nothing.
$END

$PROTO_FUNC       CM_PROTO_term_func
$RETURN_TYPE      void
$PARAMETER_LIST
    (int pid, int sig, struct rusage *rusage)
$SUMMARY          This routine is called when a child process is killed.
$PURPOSE
    This routine is called when a child process is killed.
$PARAMETER        pid :
    The process ID.
$PARAMETER        sig :
    The signal which killed the process.
$PARAMETER        rusage :
    The resource usage information. If this is NULL, the platform does
    not support this.
$RETURNS
    Nothing.
$END

$PROTO_FUNC       CM_PROTO_exit_func
$RETURN_TYPE      void
$PARAMETER_LIST
    (int pid, int value, struct rusage *rusage)
$SUMMARY          This routine is called when a child process exits.
$PURPOSE
    This routine is called when a child process exits.
$PARAMETER        pid :
    The process ID.
$PARAMETER        value :
    The value passed to <<_exit>>.
$PARAMETER        rusage :
    The resource usage information. If this is NULL, the platform does
    not support this.
$RETURNS
    Nothing.
$END
