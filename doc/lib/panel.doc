/*  Link with:    -lkarma  */
/*  This file describes the panel_ package of routines in the Karma
    library.

    These routines are meant to provide high level definition and processing of
    command lines.


    Written by		Richard Gooch	22-Jan-1996

    Last updated by	Richard Gooch	5-OCT-1993


*/

KControlPanel panel_create (flag blank)
/*  [PUEPOSE] This routine will create a control panel object.
    <blank> If TRUE, then the routine will create a blank form, else it will
    add some internally defined panel items.
    [RETURNS] A KControlPanel object on success, else NULL.
*/
/*---------------------------------------------------------------------------*/

KControlPanel panel_create_group ()
/*  [PURPOSE] This routine will create a control panel object which is a
    container for a group of items. Panel items may be added to this panel
    object, and the panel object itself may be later added as panel item to
    another panel object (of type PIT_GROUP).
    [RETURNS] A KControlPanel object on success, else NULL.
*/
/*---------------------------------------------------------------------------*/

void panel_add_item (KControlPanel panel, char *name, char *comment,
		     unsigned int type, void *value_ptr, ...)
/*  [PURPOSE] This routine will add a panel item to a KControlPanel object.
    Each panel item has a number of "attributes". First come the "core"
    attributes, follwed by the optional attributes.
    Below are the core attributes:
    <panel> The control panel to add to.
    <name> The name of the panel item.
    <comment> the comment (eg. name of the units: "(km/sec)").
    <type> The type of the panel item.
    <value_ptr> A pointer to the panel item data storage.
    [VARARGS] The optional attributes are given as pairs of attribute-key
    attribute-value pairs. The last argument must be PIA_END.
    The attributes are passed using varargs.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

void panel_push_onto_stack (KControlPanel panel)
/*  [PURPOSE] This routine will push a control panel object onto the control
    panel stack.
    <panel> The control panel.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

void panel_pop_from_stack ()
/*  [PURPOSE] This routine will pop the last pushed control panel object from
    the control panel stack.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

flag panel_process_command_with_stack (char *cmd, flag (*unknown_func) (),
				       FILE *fp)
/*  [PURPOSE] This routine will process a command, using the top control panel
    on the stack to interpret it.
    <cmd> The command.
    <unknown_func> The function that is called when the command is not
    understood. If this is NULL, then a message is displayed if the command is
    not understood. The interface to this routine is as follows:
    [<pre>]
    flag unknown_func (char *cmd, FILE *fp)
    *   [PURPOSE] This routine will process a command.
        <cmd> The command.
	<fp> Output messages are directed here.
	[RETURNS] TRUE if more commands should be processed, else FALSE,
	indicating that the "exit" command was entered.
    *
    [</pre>]
    <fp> Output messages are directed here.
    [RETURNS] TRUE if more commands should be processed, else FALSE, indicating
    that the control panel's "exit" command was entered.
*/
/*---------------------------------------------------------------------------*/
