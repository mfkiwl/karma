$PACKAGE          c
$SUMMARY          Routines to manage callback lists
$PURPOSE
    These routines are meant to provide a general purpose callback management
    framework. Library packages and applications may use this package to
    implement their own callback mechanisms. This package removes the need for
    external code to maintain and traverse callback lists.
$LIBRARY          karma
$LINKWITH         -lkarma
$END

$FUNCTION         c_register_callback
$RETURN_TYPE      KCallbackFunc
$PARAMETER_LIST
    (KCallbackList *list, flag (*callback) (),
				   void *object,
				   void *client1_data, flag client1_indirect,
				   void *client2_data, flag client2_indirect,
				   flag quenchable)
$SUMMARY          Register a callback function with a list.
$PURPOSE
    This routine will register a function which should be called when
    the callbacks for an object should be called. When the object is destroyed
    a call should be made to <-c_destroy_list->. The first callback registered
    is the first one called. Multiple callback functions may be registered per
    object.
$PARAMETER        list :
    A pointer to the callback list. This is changed. The initial value
    must be NULL.
$PARAMETER        callback :
    The function to be called when the object callbacks are called.
    The prototype function is <-C_PROTO_callback->.
$PARAMETER        object :
    The object pointer passed to the callback. This may be NULL.
$PARAMETER        client1_data :
    The first client information pointer passed to the callback.
    This may be NULL.
$PARAMETER        client1_indirect :
    If TRUE the callback is passed a pointer to the storage
    containing <<client1_data>>, else <<client1_data>> is passed directly to
    the callback.
$PARAMETER        client2_data :
    The second client information pointer passed to the callback
    This may be NULL.
$PARAMETER        client2_indirect :
    If TRUE the callback is passed a pointer to the storage
    containing <<client2_data>>, else <<client2_data>> is passed directly to
    the callback.
$PARAMETER        quenchable :
    If TRUE then the routine is permitted to quench calls to the
    following callbacks in the list.
$RETURNS
    A KCallbackFunc on success. On failure, the process aborts.
$END

$FUNCTION         c_unregister_callback
$RETURN_TYPE      void
$PARAMETER_LIST
    (KCallbackFunc callback)
$SUMMARY          Unregister a callback function.
$PURPOSE
    Unregister a callback function.
$PARAMETER        callback :
    The callback function.
$RETURNS
    Nothing.
$END

$FUNCTION         c_call_callbacks
$RETURN_TYPE      flag
$PARAMETER_LIST
    (KCallbackList list, void *call_data)
$SUMMARY          Call all registered callbacks for an object.
$PURPOSE
    Call all registered callbacks for an object.
$PARAMETER        list :
    The callback list.
$PARAMETER        call_data :
    The arbitrary call information pointer.
$RETURNS
    TRUE if one of the callbacks quenched the further delivery of
    callbacks, else FALSE.
$END

$FUNCTION         c_destroy_list
$RETURN_TYPE      void
$PARAMETER_LIST
    (KCallbackList list)
$SUMMARY          Destroy a callback list.
$PURPOSE
    This routine will unregister all callbacks in a callback list and
    then destroys the list.
$PARAMETER        list :
    The callback list.
$RETURNS
    Nothing.
$END

$PROTO_FUNC       C_PROTO_callback
$RETURN_TYPE      flag
$PARAMETER_LIST
    (void *object, void *client1_data, void *call_data,
		      void *client2_data)
$SUMMARY          Generic callback.
$PURPOSE
    This routine is called when object callbacks are called.
$PARAMETER        object :
    The object information pointer.
$PARAMETER        client1_data :
    The first client information pointer.
$PARAMETER        call_data :
    The call information pointer.
$PARAMETER        client2_data :
    The second client information pointer.
$RETURNS
    TRUE if further callbacks should not be called, else FALSE.
$END
