/*  Link with:    -lkarmagraphics  */
/*  This file describes the overlay_ package of routines in the Karma library.

    These routines provide a simple interface to the recursive,
    heirarchical data structure supported in Karma, to define 2-dimensional
    (image) overlay objects. In addition, all the mechanics for drawing onto
    world canvases (see the  canvas_  package) is supplied automatically.


    Written by		Richard Gooch	30-Nov-1994

    Last updated by	Richard Gooch	30-Nov-1994


*/

KOverlayList overlay_create_list (void *info)
/*  This routine will create a managed overlay object list.
    The arbitrary information pointer for the overlay list must be pointed to
    by  info  .This may be NULL.
    The routine returns a KOverlayList object on success, else it returns NULL.
*/
/*---------------------------------------------------------------------------*/

void overlay_specify_iarray_2d (KOverlayList olist, iarray array)
/*  This routine will specify horizontal and vertical label matching for an
    overlay list based on the dimension names of a 2-dimensional Intelligent
    Array. No further restrictions are imposed (any existing restrictions are
    removed) if the Intelligent Array is a pure 2-dimensional array. If the
    array is an alias of a plane of a 3-dimensional (or greater) array, then
    further restrictions are imposed.
    The overlay list must be given by  olist  .
    The Intelligent Array must be given by  array  .
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

void overlay_specify_canvas (KOverlayList olist, KWorldCanvas canvas)
/*  This routine will register a world canvas to extract specification
    information from for all future overlay objects which are created with an
    overlay object list.
    The overlay list must be given by  olist  .
    The world canvas must be given by  canvas  .
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

flag overlay_associate_display_canvas (KOverlayList olist, KWorldCanvas canvas)
/*  This routine will register a world canvas to display overlay objects on
    when overlay objects received (either by  overlay_  function calls within
    the application or over a "2D_overlay" connection). Multiple canvases may
    be associated with an overlay list.
    The overlay list must be given by  olist  .
    The world canvas must be given by  canvas  .
    The routine returns TRUE on success, else it returns FALSE (indicating that
    an error occurred refreshing the canvas).
*/
/*---------------------------------------------------------------------------*/

flag overlay_unassociate_display_canvas (KOverlayList olist,
					 KWorldCanvas canvas)
/*  This routine will unregister a world canvas to display overlay objects.
    The overlay list must be given by  olist  .
    The world canvas must be given by  canvas  .
    The routine returns TRUE if the canvas was associated,
    else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/

flag overlay_redraw_on_canvas (KOverlayList olist, KWorldCanvas canvas)
/*  This routine will redraw an overlay list onto a world canvas.
    The overlay list must be given by  olist  .
    The world canvas must be given by  canvas  .
    The routine returns TRUE on succes, else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_line (KOverlayList olist,
			   unsigned int type0, double x0,double y0,
			   unsigned int type1, double x1, double y1,
			   char *colourname)
/*  This routine will add a line to an overlay object list. See also
    overlay_lines  .
    The overlay list must be given by  olist  .
    The type of the first co-ordinate must be given by  type0  .
    The horizontal position of the first co-ordinate must be given by  x0  .
    The vertical position of the first co-ordinate must be given by  y0  .
    The type of the second co-ordinate must be given by  type1  .
    The horizontal position of the second co-ordinate must be given by  x1  .
    The vertical position of the second co-ordinate must be given by  y1  .
    The colourname must be pointed to by  colourname  .
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_lines (KOverlayList olist, unsigned int num_coords,
			    unsigned int *types, double *x_arr, double *y_arr,
			    char *colourname)
/*  This routine will add a number of connected lines to an overlay object list
    These lines will form a single object. Using this routine is far more
    efficient than calling  overlay_line  repeatedly.
    The overlay list must be given by  olist  .
    The number of co-ordinates must be given by  num_coords  .The number of
    lines is one less than this value.
    The co-ordinate types must be pointed to by  types  .If this is
    NULL, all co-ordinates are assumed to be world co-ordinates.
    The horizontal co-ordinate values must be pointed to by  x_arr  .
    The vertical co-ordinate values must be pointed to by  y_arr  .
    The colourname must be pointed to by  colourname  .
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_text (KOverlayList olist, char *string, unsigned int type,
			   double x, double y, char *colourname,
			   char *fontname, flag clear_under)
/*  This routine will add a text string to an overlay object list.
    The overlay list must be given by  olist  .
    The text string must be pointed to by  string  .
    The type of the co-ordinate must be given by  type  .
    The horizontal position of the co-ordinate must be given by  x  .
    The vertical position of the co-ordinate must be given by  y  .
    The colourname must be pointed to by  colourname  .
    The font name must be pointed to by  fontname  .
    If the value of  clear_under  is TRUE, then both the foreground and
    background of the characters will be drawn.
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_ellipse (KOverlayList olist,
			      unsigned int ctype,double cx, double cy,
			      unsigned int rtype, double rx, double ry,
			      char *colourname, flag filled)
/*  This routine will add an ellipse to an overlay object list. See also
    overlay_eillipses  .
    The overlay list must be given by  olist  .
    The type of the centre co-ordinate must be given by  ctype  .
    The horizontal position of the centre co-ordinate must be given by  cx  .
    The vertical position of the centre co-ordinate must be given by  cy  .
    The type of the radius co-ordinate must be given by  rtype  .
    The horizontal radius must be given by  rx  .
    The vertical radius must be given by  ry  .
    The colourname must be pointed to by  colourname  .
    If the ellipse is to be filled, the value of  filled  must be TRUE.
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_filled_polygon (KOverlayList olist,
				     unsigned int num_coords,
				     unsigned int *types,
				     double *x_arr, double *y_arr,
				     char *colourname)
/*  This routine will add a filled polygon to an overlay object list.
    The overlay list must be given by  olist  .
    The number of co-ordinates (vertices) must be given by  num_coords  .
    The co-ordinate type values must be pointed to by  types  .If this is
    NULL, all co-ordinates are assumed to be world co-ordinates.
    The first horizontal co-ordinate value must be pointed to by  x_arr  .
    The first vertical co-ordinate value must be pointed to by  y_arr  .
    The colourname must be pointed to by  colourname  .
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_vector (KOverlayList olist,
			     unsigned int stype, double sx, double sy,
			     unsigned int dtype, double dx, double dy,
			     char *colourname)
/*  This routine will add a vector (directed line) to an overlay object list.
    See also  overlay_vectors  .
    The overlay list must be given by  olist  .
    The type of the start co-ordinate must be given by  stype  .
    The horizontal position of the start co-ordinate must be given by  sx  .
    The vertical position of the start co-ordinate must be given by  sy  .
    The type of the vector direction must be given by  dtype  .
    The horizontal vector direction must be given by  dx  .
    The vertical vector direction must be given by  dy  .
    The colourname must be pointed to by  colourname  .
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_ellipses (KOverlayList olist, unsigned int num_ellipses,
			       unsigned int *ctypes, double *cx, double *cy,
			       unsigned int *rtypes, double *rx, double *ry,
			       char *colourname, flag filled)
/*  This routine will add a number of ellipses to an overlay object list. These
    ellipses will form a single object. Using this routine is far more
    efficient than calling  overlay_ellipse  repeatedly.
    The overlay list must be given by  olist  .
    The number of ellipses must be given by  num_ellipses  .
    The types of the centre co-ordinates must be pointed to by  ctypes  .If
    this is NULL, all co-ordinates are assumed to be world co-ordinates.
    The horizontal positions of the centre co-ordinates must be pointed to by
    cx  .
    The vertical positions of the centre co-ordinates must be pointed to by  cy
    The types of the radii co-ordinates must be given by  rtypes  .If this is
    NULL, all co-ordinates are assumed to be world co-ordinates.
    The horizontal radii must be pointed to by  rx  .
    The vertical radii must be pointed to by  ry  .
    The colourname must be pointed to by  colourname  .
    If the ellipses are to be filled, the value of  filled  must be TRUE.
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_segments (KOverlayList olist, unsigned int num_segments,
			       unsigned int *types0, double *x0, double *y0,
			       unsigned int *types1, double *x1, double *y1,
			       char *colourname)
/*  This routine will add a number of disjoint line segments to an overlay
    object list. These segments will form a single object. Using this routine
    is far more efficient than calling  overlay_line  repeatedly.
    The overlay list must be given by  olist  .
    The number of segments must be given by  num_segments  .
    The types of the start co-ordinates must be pointed to by  types0  .If
    this is NULL, all co-ordinates are assumed to be world co-ordinates.
    The horizontal positions of the start co-ordinates must be pointed to by
    x0  .
    The vertical positions of the start co-ordinates must be pointed to by  y0
    The types of the stop co-ordinates must be pointed to by  types1  .If
    this is NULL, all co-ordinates are assumed to be world co-ordinates.
    The horizontal positions of the stop co-ordinates must be pointed to by  x1
    The vertical positions of the stop co-ordinates must be pointed to by  y1
    The colourname must be pointed to by  colourname  .
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

unsigned int overlay_vectors (KOverlayList olist, unsigned int num_vectors,
			      unsigned int *stypes, double *sx, double *sy,
			      unsigned int *dtypes, double *dx, double *dy,
			      char *colourname)
/*  This routine will add a number of vectors (directed lines) to an overlay
    object list. These vectors will form a single object. Using this routine
    is far more efficient than calling  overlay_vector  repeatedly.
    The overlay list must be given by  olist  .
    The number of vectors must be given by  num_vectors  .
    The types of the start co-ordinates must be pointed to by  stypes  .If
    this is NULL, all co-ordinates are assumed to be world co-ordinates.
    The horizontal positions of the start co-ordinates must be pointed to by
    sx  .
    The vertical positions of the start co-ordinates must be pointed to by  sy
    The types of the vector directions must be pointed to by  dtypes  .If
    this is NULL, all directions are assumed to be in world co-ordinates.
    The horizontal vector directions must be pointed to by  dx  .
    The vertical vector directions must be pointed to by  dy  .
    The colourname must be pointed to by  colourname  .
    The routine returns the objectID on success, else it returns 0.
*/
/*---------------------------------------------------------------------------*/

flag overlay_remove_objects (KOverlayList olist, unsigned int num_objects)
/*  This routine will remove objects from the end of an overlay object list.
    The overlay list must be given by  olist  .
    The number of objects to remove must be given by  num_objects  .If this is
    0, then the list is emptied.
    The routine returns TRUE on success, else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/

flag overlay_remove_object (KOverlayList olist, unsigned int id_in_list,
			    unsigned int list_id)
/*  This routine will remove one object from an overlay object list.
    The overlay list must be given by  olist  .
    The object ID must be given by  id_in_list  .This Id refers to an object
    created by a particular list master or slave.
    The ID of the list which created the object must be given by  list_id  .If
    this is 0, the list given by  olist  is assumed.
    The routine returns TRUE on success, else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/

flag overlay_move_object (KOverlayList olist, unsigned int id_in_list,
			  unsigned int list_id, double dx, double dy)
/*  This routine will move a object in an overlay object list.
    The overlay list must be given by  olist  .
    The object ID must be given by  id_in_list  .This Id refers to an object
    created by a particular list master or slave.
    The ID of the list which created the object must be given by  list_id  .If
    this is 0, the list given by  olist  is assumed.
    The horizontal distance to move must be given by  dx  .
    The vertical distance to move must be given by  dy  .
    The routine returns TRUE on success, else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/
