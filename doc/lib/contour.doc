$PACKAGE          contour
$SUMMARY          Routines to manipulate contour images
$PURPOSE
    These routines are meant to provide a high level mechanism to create and
    manipulate contour images (2-dimensional slices of Karma data structures).
    These contour images utilise the world canvases available in the
    <-canvas-> package, hence the resulting code is device independent.
    NOTE: THIS PACKAGE IS WORK IN PROGRESS. THE INTERFACE MAY CHANGE IN THE
    NEXT RELEASE, POSSIBLY WITHOUT NOTICE.
$LIBRARY          karmagraphics
$LINKWITH         -lkarmagraphics
$END

$FUNCTION           contour_init
$RETURN_TYPE        void
$PARAMETER_LIST
    (KWorldCanvas canvas, ...)
$SUMMARY            Initialise the package for a particular canvas.
$PURPOSE
    This routine will initialise the <-contour-> package for a
    particular world canvas. Calling this routine causes a number of callback
    routines internal to the package to be registered with the canvas (such
    as refresh and position event callbacks). This routine must be called
    before creating contour images.
$PARAMETER          canvas :
    The world canvas object.
$PARAMETER        ... :
    The list of parameter attribute-key attribute-value-ptr pairs
    must follow. This list must be terminated with the CONTOUR_CANVAS_ATT_END.
    See <-CONTOUR_CANVAS_ATTRIBUTES-> for the list of attributes.
$RETURNS
    Nothing.
$END

$FUNCTION           contour_create_restr
$RETURN_TYPE        KContourImage
$PARAMETER_LIST
    (KWorldCanvas canvas,
				    multi_array *multi_desc,
				    array_desc *arr_desc, char *slice,
				    unsigned int hdim, unsigned int vdim,
				    unsigned int elem_index,
				    unsigned int num_levels,
				    CONST double *contour_levels,
				    unsigned num_restr,
				    char **restr_names, double *restr_values)
$SUMMARY            Create contour image from 2D slice with restrictions.
$PURPOSE
    This routine will create a contour image object from a
    2-dimensional slice of a Karma data structure. At a later time, this
    contour image may be made visible. This routine will not cause the canvas
    to be refreshed.
$PARAMETER          canvas :
    The world canvas onto which the contour image may be drawn. Many
    contour images may be associated with a single canvas.
$PARAMETER          multi_desc :
    The  multi_array  descriptor which contains the Karma data
    structure. The routine increments the attachment count on the descriptor
    on successful completion. This may be NULL.
$PARAMETER          arr_desc :
    The array descriptor.
$PARAMETER          slice :
    The start of the slice data.
$PARAMETER          hdim :
    The dimension index of the horizontal dimension.
$PARAMETER          vdim :
    The dimension index of the vertical dimension.
$PARAMETER          elem_index :
    The element index in the data packets.
$PARAMETER          num_levels :
    The number of contour levels. This may be 0.
$PARAMETER          contour_levels :
    The array of contour levels.
$PARAMETER          num_restr :
    The number of matched restrictions.
$PARAMETER          restr_names :
    The restriction names.
$PARAMETER          restr_values :
    The restriction values.
$NOTE
    Restriction information is automatically deallocated when
    <-contour_destroy-> is called.
$RETURNS
    A KContourImage object on success, NULL.
$END

$FUNCTION           contour_create_from_iarray
$RETURN_TYPE        KContourImage
$PARAMETER_LIST
    (KWorldCanvas canvas, iarray array,
					  flag swap, unsigned int num_levels,
					  CONST double *contour_levels)
$SUMMARY            Create a contour image from an Intelligent Array.
$PURPOSE
    This routine will create a contour image object from a
    2-dimensional Intelligant Array. At a later time, this contour image may
    be made visible. This routine will not cause the canvas to be refreshed.
    Many contour images may be associated with a single canvas.
$PARAMETER          canvas :
    The world canvas object.
$PARAMETER          array :
    The Intelligent Array. The underlying <<multi_array>> data
    structure will have its attachment count incremented upon successful
    completion.
$PARAMETER          swap :
    If TRUE the y axis will be displayed horizontally.
$PARAMETER          num_levels :
    The number of contour levels. This may be 0.
$PARAMETER          contour_levels :
    The array of contour levels.
$RETURNS
    A KContourImage object on success, else NULL.
$END

$FUNCTION           contour_create_sequence
$RETURN_TYPE        KContourImage *
$PARAMETER_LIST
    (KWorldCanvas canvas,
					multi_array *multi_desc,
					array_desc *arr_desc, char *cube,
					unsigned int hdim, unsigned int vdim,
					unsigned int fdim,
					unsigned int elem_index,
					unsigned int num_levels,
					CONST double *contour_levels)
$SUMMARY            Create a sequence of contour images from a 3D slice.
$PURPOSE
    This routine will create a sequence of contour image objects
    from a 3-dimensional cube of a Karma data structure. At a later time, this
    sequence of contour images may be made visible in any order.
    This routine will not cause the canvas to be refreshed.
$PARAMETER          canvas :
    The world canvas object.
$PARAMETER          multi_desc :
    The  multi_array  descriptor which contains the Karma data
    structure. The routine increments the attachment count on the descriptor
    on successful completion. This may be NULL.
$PARAMETER          arr_desc :
    The array descriptor.
$PARAMETER          cube :
    The start of the cube data.
$PARAMETER          hdim :
    The dimension index of the horizontal dimension.
$PARAMETER          vdim :
    The dimension index of the vertical dimension.
$PARAMETER          fdim :
    The dimension index of the frame dimension (dimension containing the
    sequence). The number of frames is the same as the length of this
    dimension.
$PARAMETER          elem_index :
    The element index in the data packets.
$PARAMETER          num_levels :
    The number of contour levels. This may be 0.
$PARAMETER          contour_levels :
    The array of contour levels.
$RETURNS
    A pointer to a dynamically allocated array of contour image
    objects on success, else NULL.
$END

$FUNCTION           contour_create_sequence_from_iarray
$RETURN_TYPE        KContourImage *
$PARAMETER_LIST
    (KWorldCanvas canvas, iarray array,
     unsigned int hdim, unsigned int vdim, unsigned int fdim,
     unsigned int num_levels, CONST double *contour_levels)
$SUMMARY            Create a sequence of contour images from an Intelligent Array.
$PURPOSE
    This routine will create a sequence of contour image objects
    from a 3-dimensional Intelligent Array. At a later time, this sequence of
    contour images may be made visible in any order.
    This routine will not cause the canvas to be refreshed.
$PARAMETER          canvas :
    The world canvas object.
$PARAMETER          array :
    The Intelligent Array. The underlying <<multi_array>> data
    structure will have its attachment count incremented upon successful
    completion.
$PARAMETER          hdim :
    The dimension index of the horizontal dimension.
$PARAMETER          vdim :
    The dimension index of the vertical dimension.
$PARAMETER          fdim :
    The dimension index of the frame dimension (dimension containing the
    sequence). The number of frames is the same as the length of this
    dimension.
$PARAMETER          num_levels :
    The number of contour levels. This may be 0.
$PARAMETER          contour_levels :
    The array of contour levels.
$RETURNS
    A pointer to a dynamically allocated array of contour image
    objects on success, else NULL.
$END

$FUNCTION           contour_set_active
$RETURN_TYPE        flag
$PARAMETER_LIST
    (KContourImage cimage, flag active, flag force_refresh,
			 flag refresh_if_changed, flag exclusive)
$SUMMARY            Set active state for a contour image controlled refresh.
$PURPOSE
    This routine will make a contour image active or inactive.
$PARAMETER          cimage :
    The contour image.
$PARAMETER          active :
    If TRUE, the contourable image is made active, else it is made
    inactive.
$PARAMETER          force_refresh :
    If TRUE, the canvas is always refreshed.
$PARAMETER          refresh_if_changed :
    If TRUE, the canvas is refreshed if the contourable
    image active state changed.
$PARAMETER          exclusive :
    If TRUE and <<active>> is TRUE, make this contour image the
    only active one for this canvas.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION           contour_register_data_change
$RETURN_TYPE        flag
$PARAMETER_LIST
    (KContourImage cimage)
$SUMMARY            Notify data for contour image has changed.
$PURPOSE
    This routine will register a change in the Karma data structure
    associated with a contour image. If the contour image is active, it will
    be immediately redrawn on its canvas.
$PARAMETER          cimage :
    The contour image.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION           contour_destroy
$RETURN_TYPE        void
$PARAMETER_LIST
    (KContourImage cimage)
$SUMMARY            Destroy contour image.
$PURPOSE
    This routine will destroy a contour image.
$PARAMETER          cimage :
    The contour image.
$NOTE
    The associated <<multi_array>> descriptor is also deallocated (or
    at least, the attachment count is decreased).
$RETURNS
    Nothing.
$END

$FUNCTION           contour_set_canvas_attributes
$RETURN_TYPE        void
$PARAMETER_LIST
    (KWorldCanvas canvas, ...)
$SUMMARY            Set the contour image attributes for a world canvas.
$PURPOSE
    Set the contour image attributes for a world canvas.
$PARAMETER          canvas :
    The world canvas.
$PARAMETER        ... :
    The list of parameter attribute-key attribute-value-ptr pairs
    must follow. This list must be terminated with the CONTOUR_CANVAS_ATT_END.
    See <-CONTOUR_CANVAS_ATTRIBUTES-> for the list of attributes.
$NOTE
    The canvas is not refreshed by this operation.
$RETURNS
    Nothing.
$END

$FUNCTION           contour_set_levels
$RETURN_TYPE        void
$PARAMETER_LIST
    (KContourImage cimage, unsigned int num_levels,
			 CONST double *contour_levels,
			 CONST unsigned long *contour_pixels)
$SUMMARY            Set/update the contour levels for a KContourImage object.
$PURPOSE
    This routine will set/update the contour levels for a
    KContourImage object. The canvas is not refreshed by this operation.
$PARAMETER          cimage :
    The KContourImage object.
$PARAMETER          num_levels :
    The number of contour levels.
$PARAMETER          contour_levels :
    The array of contour levels.
$PARAMETER          contour_pixels :
    The array of contour pixels. This may be NULL.
$RETURNS
    Nothing.
$END

$FUNCTION           contour_get_worldcanvas
$RETURN_TYPE        KWorldCanvas
$PARAMETER_LIST
    (KContourImage cimage)
$SUMMARY            Get the world canvas for a contour image.
$PURPOSE
    Get the world canvas for a contour image.
$PARAMETER          cimage :
    The KContourImage object.
$RETURNS
    The KWorldCanvas object.
$END
