/*  Link with:    -lkarma  */
/*  This file describes the dsproc_ package of routines in the Karma
    library.

    These routines are meant to provide high level routines to process named
    objects (ie. disc and connection arrayfiles).


    Written by		Richard Gooch	16-OCT-1992

    Last updated by	Richard Gooch	16-OCT-1992


*/

void dsproc_object (object, array_names, num_arrays, save_unproc_data,
		    pre_process, process_array, post_process, mmap_option)
/*  This routine will process the Karma array in the file which has a name
    pointed to by  object  .This parameter is passed directly to the
    dsxfr_get_multi  routine.
    If the arrayfile name is "connection" or is of the form: "connection[#]"
    then the routine will attempt to find data sent from a network connection
    using the  multi_array  protocol and will also send the resultant
    information down any network connections.
    The various arrays in the multi array general data structure are selected
    and processed by using various calls.
    The array names which are to be processed must be pointed to by
    array_names  and the number of these names must be in  num_arrays  .
    If  num_arrays  is zero, all array names are matched.
    If the flag  save_unproc_data  is TRUE, then arrays with names which
    do not match are copied, rather than ignored.
    All memory allocation and error handling required are performed.
    The output multi_array data structure produced is deallocated once the data
    is written.
    The specific processing functions required in the module must be passed to
    this routine. The interface to these functions are:

    flag pre_process (multi_desc)
    *	This routine will pre process the multi array general data
	structure pointed to by  multi_desc  .
	The routine returns TRUE if processing is to continue, else it
	returns FALSE.
    *
    multi_array *multi_desc;
    {}

    flag process_array (inp_desc, inp_data, out_desc, out_data)
    *	This routine will process the input data with descriptor and data
	pointed to by  inp_desc  and  inp_data  respectively.
	The output descriptor and data pointers are written to the storage
	pointed to by  out_desc  and  out_data  respectively.
	The routine returns TRUE on success, else it returns FALSE.
    *
    packet_desc *inp_desc;
    char *inp_data;
    packet_desc **out_desc;
    char **out_data;
    {}

    flag post_process (inp_desc, out_desc)
    *	This routine will perform post processing on the multi array
	pointed to by  out_desc  .This routine is only called for disc
	arrayfiles.
	The input multi array must be pointed to by  inp_desc  .
	This routine will usually add history information and copy over
	history information from the input array.
	The routine returns TRUE if the array is to be saved, else it
	returns FALSE.
    *
    multi_array *inp_desc;
    multi_array *out_desc;
    {}

    The  mmap_option  parameter is passed directly to the  dsxfr_get_multi
    routine. In addition, the  cache  parameter for  dsxfr_get_multi  is set to
    TRUE.
    If the input data structure is likely to be modified, the value of
    mmap_option must be K_CH_MAP_NEVER, otherwise the data may be read-only
    memory mapped and writing to it will cause a segmentation fault.
    The routine returns nothing.
*/
char *object;
char *array_names[];
unsigned int num_arrays;
flag save_unproc_data;
flag (*pre_process) ();
flag (*process_array) ();
flag (*post_process) ();
unsigned int mmap_option;
/*---------------------------------------------------------------------------*/
