$PACKAGE          iarray
$SUMMARY          Routines to manipulate Intelligent Arrays
$PURPOSE
    These routines provide a simple interface to the recursive,
    heirarchical data structure supported in Karma, when only n-dimensional
    data is to be represented.
$LIBRARY          karma
$LINKWITH         -lkarma
$END

$FUNCTION         iarray_num_dim
$RETURN_TYPE      unsigned int
$PARAMETER_LIST
    (iarray array)
$SUMMARY          Get number of dimensions in an Intelligent Array
$PURPOSE
    Get number of dimensions in an Intelligent Array
$PARAMETER        array :
    The Intelligent Array.
$RETURNS
    The number of dimensions.
$END

$FUNCTION         iarray_type
$RETURN_TYPE      unsigned int
$PARAMETER_LIST
    (iarray array)
$SUMMARY          Get type of data in an Intelligent Array
$PURPOSE
    Get type of data in an Intelligent Array
$PARAMETER        array :
    The Intelligent Array.
$RETURNS
    The type of the data in the array.
$END

$FUNCTION         iarray_value_name
$RETURN_TYPE      CONST char *
$PARAMETER_LIST
    (iarray array)
$SUMMARY          Get name of data in an Intelligent Array
$PURPOSE
    Get name of data in an Intelligent Array
$PARAMETER        array :
    The Intelligent Array.
$RETURNS
    The name of the data in the array.
$END

$FUNCTION         iarray_register_destroy_func
$RETURN_TYPE      KCallbackFunc
$PARAMETER_LIST
    (iarray array, void (*destroy_func) (iarray array, void *info), void *info)
$SUMMARY          Register destroy function for an Intelligent Array
$PURPOSE
    Register destroy function for an Intelligent Array.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        destroy_func :
    The routine that is called when the array is destroyed. The prototype
    function is <-IARRAY_PROTO_destroy_func->.
$PARAMETER        info :
    The arbitrary information pointer.
$RETURNS
    The name of the data in the array.
$END

$FUNCTION         iarray_get_image_from_multi
$RETURN_TYPE      flag
$PARAMETER_LIST
    (multi_array *multi_desc, iarray *pseudo,
				  iarray *red, iarray *green, iarray *blue,
				  unsigned int *cmap_index)
$SUMMARY          Get an image from a Karma data structure.
$PURPOSE
    This routine will find an image embedded in a Karma data
    structure. The image may be single-channel (PseudoColour) or it may be a
    TrueColour image (red, green and blue components).
$PARAMETER        multi_desc :
    The Karma data structure.
$PARAMETER        pseudo :
    If a single-channel image is found, the corresponding Intelligent
    Array is written here. If no single-channel image is found, NULL is written
    here.
$PARAMETER        red :
    If a TrueColour image is found, the red component Intelligent Array
    is written here. If no TrueColour image is found, NULL is written here.
$PARAMETER        green :
    If a TrueColour image is found, the green component Intelligent
    Array is written here. If no TrueColour image is found, NULL is written
    here.
$PARAMETER        blue :
    If a TrueColour image is found, the blue component Intelligent Array
    is written here. If no TrueColour image is found, NULL is written here.
$PARAMETER        cmap_index :
    If the image found is a single-channel image and the data
    structure has an associated RGBcolourmap, the index to the colourmap
    structure is written here. If no colourmap is found, the value written here
    is set to the number of general data structures in multi_desc.
$RETURNS
    TRUE on succes, else FALSE.
$END

$FUNCTION         iarray_get_movie_from_multi
$RETURN_TYPE      flag
$PARAMETER_LIST
    (multi_array *multi_desc, iarray *pseudo,
				  iarray *red, iarray *green, iarray *blue,
				  unsigned int *cmap_index)
$SUMMARY          Get a movie from a Karma data structure.
$PURPOSE
    This routine will find a movie embedded in a Karma data
    structure. The movie may be single-channel (PseudoColour) or it may be a
    TrueColour movie (red, green and blue components).
$PARAMETER        multi_desc :
    The Karma data structure.
$PARAMETER        pseudo :
    If a single-channel movie is found, the corresponding Intelligent
    Array is written here. If no single-channel movie is found, NULL is written
    here.
$PARAMETER        red :
    If a TrueColour movie is found, the red component Intelligent Array
    is written here. If no TrueColour movie is found, NULL is written here.
$PARAMETER        green :
    If a TrueColour movie is found, the green component Intelligent
    Array is written here. If no TrueColour movie is found, NULL is written
    here.
$PARAMETER        blue :
    If a TrueColour movie is found, the blue component Intelligent Array
    is written here. If no TrueColour movie is found, NULL is written here.
$PARAMETER        cmap_index :
    If the movie found is a single-channel movie and the data
    structure has an associated RGBcolourmap, the index to the colourmap
    structure is written here. If no colourmap is found, the value written here
    is set to the number of general data structures in multi_desc.
$RETURNS
    TRUE on succes, else FALSE.
$END

$FUNCTION         iarray_read_nD
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (CONST char *object, flag cache, CONST char *arrayname,
		       unsigned int num_dim, CONST char **dim_names,
		       CONST char *elem_name,
		       unsigned int mmap_option)
$SUMMARY          Read in a Karma arrayfile and yield an "Intelligent Array".
$PURPOSE
    Read in a Karma arrayfile and yield an "Intelligent Array".
$PARAMETER        object :
    The name of the arrayfile to read. This parameter is passed
    directly to the <-dsxfr_get_multi-> routine. In order to understand the
    operation of this routine, the operation of the <-dsxfr_get_multi-> routine
    must be understood.
$PARAMETER        cache :
    This is passed directly to the <-dsxfr_get_multi-> routine.
    This controls whether disc arrayfiles are cached in memory for later use.
$PARAMETER        arrayname :
    The name of the general data structure in the arrayfile to
    search for. If this is NULL, the routine searches for the default name
    "Intelligent Array". If the arrayfile has only one general data structure,
    then this parameter is ignored.
$PARAMETER        num_dim :
    The routine searches for an n-dimensional array with a single
    atomic element at each point in multi-dimensional space. If this parameter
    is greater than 0, the routine will only return an array with the specified
    number of dimensions. If the value is 0, then the routine will return an
    n-dimensional array.
$PARAMETER        dim_names :
    If <<num_dim>> is not 0, then if this parameter is NULL, the
    routine will search for and return an array with the default dimension
    names (see <-iarray_create-> for a list of these) if more than one
    n-dimensional, single element array exists in the general data structure,
    or the only n-dimensional array with the specified number of dimensions.
    If the routine can't find an adequate default, it will not return an array.
    If <<num_dim>> is not 0, and this parameter points to an array of strings,
    then the routine will only return an array which matches the specified
    dimension names. The first name in the array of strings must be the highest
    order dimension.
$PARAMETER        elem_name :
    If this is NULL, the routine will ignore the element name of
    the array which is located, else it will insist on the array element name
    matching the specified name.
$PARAMETER        mmap_option :
    This is passed directly to the <-dsxfr_get_multi-> routine.
    This parameter controls the memory mapping of disc arrayfiles.
    If the data structure is likely to be subsequently modified, the value must
    be K_CH_MAP_NEVER, otherwise the data may be read-only memory mapped
    and writing to it will cause a segmentation fault.
$RETURNS
    A dynamically allocated intelligent array on success, else an
    error message is printed to the standard output and NULL is returned.
$END

$FUNCTION         iarray_write
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, CONST char *arrayfile)
$SUMMARY          Write an "Intelligent Array" in the Karma data format.
$PURPOSE
    Write an "Intelligent Array" in the Karma data format.
$PARAMETER        array :
    The "Intelligent Array".
$PARAMETER        arrayfile :
    The name of the arrayfile to write. See <-dsxfr_put_multi-> for
    details on the interpretation of this.
$RETURNS
    TRUE on success, else an error message is printed to the standard
    output and FALSE is returned.
$END

$FUNCTION         iarray_create
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (unsigned int type, unsigned int num_dim,
		      CONST char **dim_names, CONST unsigned long *dim_lengths,
		      CONST char *elem_name, iarray old_array)
$SUMMARY          Create an Intelligent Array.
$PURPOSE
    This routine will create an "Intelligent Array", using the Karma
    general data structure format as the underlying data format.
    If the environment variable "IARRAY_ALLOC_DEBUG" is set to "TRUE" then the
    routine will print allocation debugging information.
$PARAMETER        type :
    The desired type of the data elements. See <-DS_KARMA_DATA_TYPES->
    for a list of defined data types.
$PARAMETER        num_dim :
    The number of dimensions the array must have.
$PARAMETER        dim_names :
    The names of the dimensions. If this is NULL, the default names
    "Axis 0", "Axis 1", etc. are used.
$PARAMETER        dim_lengths :
    The lengths of the dimensions. The first entry in this array
    and the <<dim_lengths>> array refers to the most significant dimension
    (i.e. the dimension with the greatest stride in memory).
$PARAMETER        elem_name :
    The name of the element. If this is NULL, the default name
    "Data Value" is choosen.
$PARAMETER        old_array :
    Any auxilary information not representable with "Intelligent
    Arrays" which is to be included in the Karma data format is copied from
    here. If this is NULL, no auxilary information is copied.
$RETURNS
    A dynamically allocated intelligent array on success, else an
    error message is printed to the standard output and NULL is returned.
$END

$FUNCTION         iarray_get_from_multi_array
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (multi_array *multi_desc,
				    CONST char *arrayname,
				    unsigned int num_dim,
				    CONST char **dim_names,
				    CONST char *elem_name)
$SUMMARY          Create an Intelligent Array from a Karma data structure.
$PURPOSE
    This routine will yield an "Intelligent Array" from a multi array
    Karma general data structure. The routine searches for a n-dimensional
    array with a single atomic element at each point in multi-dimensional space
$PARAMETER        multi_desc :
    The multi array header pointer. The attachment count is
    incremented on successful completion of this routine.
$PARAMETER        arrayname :
    The name of the general data structure in the arrayfile to
    search for. If this is NULL, the routine searches for the default name
    "Intelligent Array". If the arrayfile has only one general data structure,
    then this parameter is ignored.
$PARAMETER        num_dim :
    If greater than 0, the routine will only return an array with
    this many dimensions. If 0, then the routine will return an n-dimensional
    array.
$PARAMETER        dim_names :
    If <<num_dim>> is not 0, then if this NULL, the routine will
    search for and return an array with the default dimension names (see
    <<iarray_create>> for a list of these) if more than one n-dimensional,
    single element array exists in the general data structure, or the only
    n-dimensional array with the specified number of dimensions. If the routine
    can't find an adequate default, it will not return an array. If <<num_dim>>
    is not 0, and this points to an array of strings, then the routine will
    only return an array which matches the specified dimension names. The first
    name in the array of strings must be the highest order dimension.
$PARAMETER        elem_name :
    If NULL, the routine will ignore the element name of the array
    which is located, else it will insist on the array element name matching
    this name.
$RETURNS
    A dynamically allocated intelligent array on success, else an
    error message is printed to the standard output and NULL is returned.
$END

$FUNCTION         iarray_dealloc
$RETURN_TYPE      void
$PARAMETER_LIST
    (iarray array)
$SUMMARY          Deallocate an Intelligent Array.
$PURPOSE
    This routine will deallocate an "Intelligent Array". If the
    environment variable "IARRAY_ALLOC_DEBUG" is set to "TRUE" then the routine
    will print deallocation debugging information.
$PARAMETER        array :
    The Intelligent Array.
$RETURNS
    Nothing.
$END

$FUNCTION         iarray_put_named_value
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, CONST char *name, unsigned int type,
			     double value[2])
$SUMMARY          Attach a data value to an Intelligent Array.
$PURPOSE
    This routine will add a unique named value to the underlying
    Karma general data structure of an "Intelligent Array".
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        name :
    The name of the element to add.
$PARAMETER        type :
    The type of the data which is to be written.
$PARAMETER        value :
    The value of the data.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_put_named_string
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, CONST char *name, char *string)
$SUMMARY          Attach a string to an Intelligent Array.
$PURPOSE
    This routine will add a unique named string to the underlying
    Karma general data structure of an "Intelligent Array".
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        name :
    The name of the element to add.
$PARAMETER        string :
    The string data.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_get_named_value
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, CONST char *name,
			     unsigned int *type, double value[2])
$SUMMARY          Get attached data from an Intelligent Array.
$PURPOSE
    This routine will get a unique named value from the underlying
    Karma general data structure of an "Intelligent Array".
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        name :
    The name of the element.
$PARAMETER        type :
    The type of the input data found will be written here. If this is
    NULL, nothing is written here.
$PARAMETER        value :
    The value of the converted data will be written here.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_get_named_string
$RETURN_TYPE      char *
$PARAMETER_LIST
    (iarray array, CONST char *name)
$SUMMARY          Get attached string from an Intelligent Array.
$PURPOSE
    This routine will get a unique named string from the underlying
    Karma general data structure of an "Intelligent Array".
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        name :
    The name of the element.
$RETURNS
    A pointer to a dynamically allocated copy of the string on
    success, else NULL.
$END

$FUNCTION         iarray_copy_data
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray output, iarray input, flag magnitude)
$SUMMARY          Copy data between Intelligent Arrays.
$PURPOSE
    This routine will copy data from one "Intelligent Array" to
    another. The sizes of the two arrays must be identical.
    The routine can deal with the types of the two arrays being different
$PARAMETER        output :
    The output Intelligent Array.
$PARAMETER        input :
    The input Intelligent Array.
$PARAMETER        magnitude :
    If TRUE then when converting from a complex array to a real
    array, the magnitude of the complex data is taken, else the real component
    is copied.
$NOTE
    When converting from a real array to a complex data array, the
    imaginary components are set to zero.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_get_sub_array_2D
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (iarray array, int starty, int startx,
				unsigned int ylen, unsigned int xlen)
$SUMMARY          Create a 2-dimensional alias Intelligent Array.
$PURPOSE
    This routine will create an "Intelligent Array" which is an alias
    or a sub-array of another "Intelligent Array". Subsequent modification of
    the alias array will modify the data of the original array. Sub-arrays may
    be created from other sub-arrays. The attachment count of the underlying
    <<multi_array>> data structure is incremented on successful completion.
$PARAMETER        array :
    The original array.
$PARAMETER        starty :
    The starting y (row) index in the original array corresponding to
    the first row of the alias array.
$PARAMETER        startx :
    The starting x (column) index in the original array corresponding
    to the first column of the alias array.
$PARAMETER        ylen :
    The number of y co-ordinates (rows) in the alias array.
$PARAMETER        xlen :
    The number of x co-ordinates (columns) in the alias array.
$RETURNS
    A dynamically allocated intelligent array on success, else NULL.
$NOTE
    Sub-arrays cannot be saved to disc.
$END

$FUNCTION         iarray_get_2D_slice_from_3D
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (iarray cube, unsigned int ydim,
				    unsigned int xdim, unsigned int slice_pos)
$SUMMARY          Create a 2-dimensional Intelligent Array alias from a slice.
$PURPOSE
    This routine will create a 2-D "Intelligent Array" which is an
    alias of an arbitrary slice of a 3-D array.
$PARAMETER        cube :
    The input 3-D array.
$PARAMETER        ydim :
    The dimension in the 3-D array which will become the y dimension
    (most significant) of the output array.
$PARAMETER        xdim :
    The dimension in the 3-D array which will become the x dimension
    (least significant) of the output array.
$PARAMETER        slice_pos :
    The position of the slice along the unspecified (remaining)
    dimension in the 3-D array.
$RETURNS
    A dynamically allocated intelligent array on success, else NULL.
$NOTE
    Alias arrays cannot be saved to disc.
$END

$FUNCTION         iarray_dim_length
$RETURN_TYPE      unsigned long
$PARAMETER_LIST
    (iarray array, unsigned int index)
$SUMMARY          Get length of a dimension in an Intelligent Array.
$PURPOSE
    Get length of a dimension in an Intelligent Array.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        index :
    The index of the dimension.
$RETURNS
    The length of the specified dimension.
$END

$FUNCTION         iarray_get_restrictions
$RETURN_TYPE      unsigned int
$PARAMETER_LIST
    (iarray array, char ***restr_names,
				      double **restr_values)
$SUMMARY          Get restriction information.
$PURPOSE
    This routine will get any associated restrictions for an
    Intelligent Array. The routine will dynamically allocate space for the
    restriction data, which must be externally freed.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        restr_names :
    The array of pointers to restrictions names will be written
    here.
$PARAMETER        restr_values :
    The array of restriction values will be written here.
$RETURNS
    The number of restrictions. This may be 0.
$END

$FUNCTION         iarray_fill
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, double value[2])
$SUMMARY          Fill an Intelligent Array with a single value.
$PURPOSE
    Fill an Intelligent Array with a single value.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        value :
    The fill value.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_min_max
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, unsigned int conv_type, double *min,
		     double *max)
$SUMMARY          Determine the minimum and maximum value of an Intelligent Array.
$PURPOSE
    Determine the minimum and maximum value of an Intelligent Array.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        conv_type :
    The conversion type to use for complex numbers. This is ignored
    if the array is not complex. See <-DS_COMPLEX_CONVERSIONS-> for legal
    values.
$PARAMETER        min :
    The routine will write the minimum value here.
$PARAMETER        max :
    The routine will write the maximum value here.
$MT-LEVEL         Unsafe.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_scale_and_offset
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray out, iarray inp, double scale[2],
			      double offset[2], flag magnitude)
$SUMMARY          Scale and offset an Intelligent Array.
$PURPOSE
    This routine will perform a scale and offset on every element in
    an "Intelligent Array" (output = input * scale + offset).
$PARAMETER        out :
    The output Intelligent Array.
$PARAMETER        inp :
    The input Intelligent Array.
$NOTE
    The input and output arrays MUST be the same size (though not
    necessarily the same type).
$PARAMETER        scale :
    The complex scale value.
$PARAMETER        offset :
    The complex offset value.
$PARAMETER        magnitude :
    If TRUE and converting from a complex to a real array, the
    magnitude of the complex data (after scale and offset have been applied) is
    used, else the real component of the complex scaled data is used.
$NOTE
    When converting from a real to a complex array, the imaginary
    component of the output array is set to 0.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_add_and_scale
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray out, iarray inp1, iarray inp2,
			   double scale[2], flag magnitude)
$SUMMARY          Add Intelligent Arrays and scale.
$PURPOSE
    This routine will add two "Intelligent Array" to each other and
    scales the result. The sizes of the two input arrays and the output must be
    identical.
    The routine performs the following computation:
    OUT = INP1 + INP2 * scale
    The routine will automatically perform type conversions if necessary.
$PARAMETER        out :
    The output Intelligent Array.
$PARAMETER        inp1 :
    The first input Intelligent Array.
$PARAMETER        inp2 :
    The second input Intelligent Array.
$PARAMETER        scale :
    The complex scale value.
$PARAMETER        magnitude :
    If TRUE then when converting from a complex to a real data
    type, the magnitude is taken, else the real component is copied.
$NOTE
    When converting from a real to a complex data type, the imaginary
    component is set to zero.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_sub_and_scale
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray out, iarray inp1, iarray inp2,
			   double scale[2], flag magnitude)
$SUMMARY          Subtract Intelligent Arrays and scale.
$PURPOSE
    This routine will subtract two "Intelligent Array" from each
    other and scales the result. The sizes of the two input arrays and the
    output must be identical.
    The routine performs the following computation:
    OUT = INP1 - INP2 * scale
    The routine will automatically perform type conversions if necessary.
$PARAMETER        out :
    The output Intelligent Array.
$PARAMETER        inp1 :
    The first input Intelligent Array.
$PARAMETER        inp2 :
    The second input Intelligent Array.
$PARAMETER        scale :
    The complex scale value.
$PARAMETER        magnitude :
    If TRUE then when converting from a complex to a real data
    type, the magnitude is taken, else the real component is copied.
$NOTE
    When converting from a real to a complex data type, the imaginary
    component is set to zero.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_dim_name
$RETURN_TYPE      CONST char *
$PARAMETER_LIST
    (iarray array, unsigned int index)
$SUMMARY          Get dimension name in an Intelligent Array.
$PURPOSE
    This routine will get the name of a specified dimension in a
    simple, n-dimensional array.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        index :
    The index of the dimension.
$RETURNS
    A pointer to the name of the specified dimension.
$END

$FUNCTION         iarray_remap_torus
$RETURN_TYPE      void
$PARAMETER_LIST
    (iarray array, unsigned int boundary_width)
$SUMMARY          Remap Intelligent Array into a torus.
$PURPOSE
    This routine will remap an N-dimensional "Intelligent Array" to a
    pseudo-toroidal array.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        boundary_width :
    The width of the array boundary within which the array
    appears to be toroidal.
$RETURNS
    Nothing.
$END

$FUNCTION         iarray_set_world_coords
$RETURN_TYPE      void
$PARAMETER_LIST
    (iarray array, unsigned int index, double first,
			      double last)
$SUMMARY          Set the world co-ordinates of an Intelligent Array dimension.
$PURPOSE
    Set the world co-ordinates of an Intelligent Array dimension.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        index :
    The index of the dimension.
$PARAMETER        first :
    The first real world co-ordinate.
$PARAMETER        last :
    The last real world co-ordinate.
$RETURNS
    Nothing.
$END

$FUNCTION         iarray_get_world_coords
$RETURN_TYPE      void
$PARAMETER_LIST
    (iarray array, unsigned int index,
			      double *first, double *last)
$SUMMARY          Get the world co-ordinates of an Intelligent Array dimension.
$PURPOSE
    Get the world co-ordinates of an Intelligent Array dimension.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        index :
    The index of the dimension.
$PARAMETER        first :
    The first real world co-ordinate is written here.
$PARAMETER        last :
    The last real world co-ordinate is written here.
$RETURNS
    Nothing.
$END

$FUNCTION         iarray_get_dim_desc
$RETURN_TYPE      dim_desc *
$PARAMETER_LIST
    (iarray array, unsigned int index)
$SUMMARY          Get a dimension descriptor from an Intelligent Array.
$PURPOSE
    Get a dimension descriptor from an Intelligent Array.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        index :
    The index of the dimension.
$RETURNS
    A pointer to the dimension descriptor.
$END

$FUNCTION         iarray_compute_histogram
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, unsigned int conv_type,
			       double min, double max, unsigned long num_bins,
			       unsigned long *histogram_array,
			       unsigned long *histogram_peak,
			       unsigned long *histogram_mode)
$SUMMARY          Compute a histogram of an "Intelligent Array".
$PURPOSE
    Compute a histogram of an "Intelligent Array".
$PARAMETER        array :
    The array.
$PARAMETER        conv_type :
    The conversion type to use for complex numbers. See
    <-DS_COMPLEX_CONVERSIONS-> for legal values. CONV_CtoR_ENVELOPE is not
    legal.
$PARAMETER        min :
    Data values below this will be ignored.
$PARAMETER        max :
    Data values above this will be ignored.
$PARAMETER        num_bins :
    The number of histogram bins.
$PARAMETER        histogram_array :
    A pointer to the histogram array. The values in this
    array are updated, and hence must be initialised externally.
$PARAMETER        histogram_peak :
    The peak of the histogram is written here. This value is
    updated, and hence must be externally initialised to 0.
$PARAMETER        histogram_mode :
    The mode of the histogram (index value of the peak) will
    be written here. This value is updated, and hence must be externally
    initialised to 0.
$MT-LEVEL         Unsafe.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_dim_index
$RETURN_TYPE      unsigned int
$PARAMETER_LIST
    (iarray array, CONST char *name)
$SUMMARY          This routine will find the index of a named dimension.
$PURPOSE
    This routine will find the index of a named dimension.
$PARAMETER        array :
    The array.
$PARAMETER        name :
    The name of the dimension.
$RETURNS
    The dimension index if found, else the number of dimension in the
    array is returned.
$END

$FUNCTION         iarray_get_data_scaling
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, double *scale, double *offset)
$SUMMARY          Get the scale and offset for data in an Intelligent Array.
$PURPOSE
    This routine will determine the scale and offset for data in an
    Intelligent Array. This may be important when a floating-point array has
    been converted to an integer array to save space. Scaling information
    should be attached to the array so that the original data values may be
    reconstructed (aside from quantisation effects). The following expression
    may be used to convert scaled values to real values:
    (output = input * scale + offset). The scaling and offset values should
    previously have been attached to the Intelligent Array using the
    <-iarray_set_data_scaling-> routine.
$PARAMETER        array :
    The array.
$PARAMETER        scale :
    The scaling value will be written here. The name of the scaling
    value is constructed by appending "__SCALE" to the array value name (see
    <-iarray_get_value_name->). If no scaling value is found, 1.0 is written
    here.
$PARAMETER        offset :
    The offset value will be written here. The name of the offset
    value is constructed by appending "__OFFSET" to the array value name (see
    <-iarray_get_value_name->). If no offset value is found, 0.0 is written
    here.
$RETURNS
    TRUE if either the scaling or offset value were found, else FALSE
$END

$FUNCTION         iarray_set_data_scaling
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, double scale, double offset)
$SUMMARY          Set the scale and offset for data in an Intelligent Array.
$PURPOSE
    This routine will set the scale and offset for data in an
    Intelligent Array. This may be important when a floating-point array has
    been converted to an integer array to save space. The scaling information
    will be attached to the array so that the original data values may be
    reconstructed (aside from quantisation effects). The following expression
    may be used to convert scaled values to real values:
    (output = input * scale + offset).
$PARAMETER        array :
    The array.
$PARAMETER        scale :
    The scaling value. The name of the scaling value is constructed by
    appending "__SCALE" to the array value name (see <-iarray_get_value_name->)
$PARAMETER        offset :
    The offset value. The name of the offset value is constructed by
    appending "__OFFSET" to the array value name(see <-iarray_get_value_name->)
$RETURNS
    TRUE if the scaling information is different from what was
    already attached to the array, else FALSE.
$END

$FUNCTION         iarray_write_mono_ps
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray image, PostScriptPage pspage,
			   double xstart, double ystart,
			   double xend, double yend, flag iscale)
$SUMMARY          Write an Intelligent Array as monochrome PostScript.
$PURPOSE
    This routine will convert a 2-dimensional Intelligent Array to
    monochrome PostScript. The routine does NOT write PostScript headers or
    tails.
$PARAMETER        image :
    The Intelligent Array.
$PARAMETER        pspage :
    The PostScriptPage object.
$PARAMETER        xstart :
    The x starting point (scaled from 0.0 to 1.0).
$PARAMETER        ystart :
    The y starting point (scaled from 0.0 to 1.0).
$PARAMETER        xend :
    The x ending point (scaled from 0.0 to 1.0).
$PARAMETER        yend :
    The y ending point (scaled from 0.0 to 1.0).
$PARAMETER        iscale :
    If FALSE and the input Intelligent Array is of type K_UBYTE the
    images values will be unscaled prior to PostScript conversion (0 = black,
    255 = white), otherwise (min = black, max = white).
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_write_pseudocolour_ps
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray image, PostScriptPage pspage,
				   double xstart, double ystart,
				   double xend, double yend,
				   unsigned short *cmap,unsigned int cmap_size)
$SUMMARY          Write an Intelligent Array as PseudoColour PostScript.
$PURPOSE
    This routine will convert a 2-dimensional Intelligent Array to
    colour PostScript. The routine does NOT write PostScript headers or tails.
$PARAMETER        image :
    The Intelligent Array.
$PARAMETER        pspage :
    The PostScriptPage object.
$PARAMETER        xstart :
    The x starting point (scaled from 0.0 to 1.0).
$PARAMETER        ystart :
    The y starting point (scaled from 0.0 to 1.0).
$PARAMETER        xend :
    The x ending point (scaled from 0.0 to 1.0).
$PARAMETER        yend :
    The y ending point (scaled from 0.0 to 1.0).
$PARAMETER        cmap :
    The colourmap. This must be the same format as returned by
    <-ds_cmap_find_colourmap->.
$PARAMETER        cmap_size :
    The size of the colourmap. The maximum size is 256.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_write_rgb_ps
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray image_red, iarray image_green,
			  iarray image_blue, PostScriptPage pspage,
			  double xstart, double ystart,
			  double xend, double yend)
$SUMMARY          Write an Intelligent Array as TrueColour PostScript.
$PURPOSE
    This routine will convert three 2-dimensional Intelligent Arrays
    to colour PostScript. The routine does NOT write PostScript headers or
    tails.
$PARAMETER        image_red :
    The Intelligent Array containing the red image component.
$PARAMETER        image_green :
    The Intelligent Array containing the green image component.
$PARAMETER        image_blue :
    The Intelligent Array containing the blue image component.
$NOTE
    Each of these Intelligent Arrays must be of type K_UBYTE.
$PARAMETER        pspage :
    The PostScriptPage object.
$PARAMETER        xstart :
    The x starting point (scaled from 0.0 to 1.0).
$PARAMETER        ystart :
    The y starting point (scaled from 0.0 to 1.0).
$PARAMETER        xend :
    The x ending point (scaled from 0.0 to 1.0).
$PARAMETER        yend :
    The y ending point (scaled from 0.0 to 1.0).
$PARAMETER        cmap :
    The colourmap. This must be the same format as returned by
    <-ds_cmap_find_colourmap->.
$PARAMETER        cmap_size :
    The size of the colourmap. The maximum size is 256.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_create_1D
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (unsigned long xlen, unsigned int type)
$SUMMARY          Create a 1-dimensional Intelligent Array.
$PURPOSE
    This routine will create a 1-dimensional "Intelligent Array",
    using the Karma general data structure format as the underlying data format
$PARAMETER        xlen :
    The length of the dimension. The name of the dimension will be the
    default: "Axis 0".
$PARAMETER        type :
    The type of the data. See <-DS_KARMA_DATA_TYPES-> for a list of
    defined data types.
$NOTE
    The name of the element will be the default name: "Intensity".
$RETURNS
    A dynamically allocated intelligent array on success, else NULL.
$END

$FUNCTION         iarray_create_2D
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (unsigned long ylen, unsigned long xlen,
			 unsigned int type)
$SUMMARY          Create a 2-dimensional Intelligent Array.
$PURPOSE
    This routine will create a 2-dimensional "Intelligent Array",
    using the Karma general data structure format as the underlying data format
$PARAMETER        ylen :
    The length of the most significant dimension (ie. the dimension with
    the greatest stride in memory.
$PARAMETER        xlen :
    The length of the least significant dimension.
$NOTE
    The names of the dimensions will be the defaults: "Axis 0" and
    "Axis 1", respectively.
$PARAMETER        type :
    The type of the data. See <-DS_KARMA_DATA_TYPES-> for a list of
    defined data types.
$NOTE
    The name of the element will be the default name: "Intensity".
$RETURNS
    A dynamically allocated intelligent array on success, else NULL.
$END

$FUNCTION         iarray_create_3D
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (unsigned long zlen, unsigned long ylen,
			 unsigned long xlen, unsigned int type)
$SUMMARY          Create a 3-dimensional Intelligent Array.
$PURPOSE
    This routine will create a 3-dimensional "Intelligent Array",
    using the Karma general data structure format as the underlying data format
$PARAMETER        zlen :
    The length of the most significant dimension (ie. the dimension with
    the greatest stride in memory).
$PARAMETER        ylen :
    The length of the middle dimension.
$PARAMETER        xlen :
    The length of the least significant dimension.
$NOTE
    The names of the dimensions will be the defaults: "Axis 0",
    "Axis 1" and "Axis 2", respectively.
$PARAMETER        type :
    The type of the data. See <-DS_KARMA_DATA_TYPES-> for a list of
    defined data types.
$NOTE
    The name of the element will be the default name: "Intensity".
$RETURNS
    A dynamically allocated intelligent array on success, else NULL.
$END

$FUNCTION         iarray_create_4D
$RETURN_TYPE      iarray
$PARAMETER_LIST
    (unsigned long zlen, unsigned long ylen,
			 unsigned long xlen, unsigned int wlen,
			 unsigned int type)
$SUMMARY          Create a 4-dimensional Intelligent Array.
$PURPOSE
    This routine will create a 4-dimensional "Intelligent Array",
    using the Karma general data structure format as the underlying data format
$PARAMETER        zlen :
    The length of the most significant dimension (ie. the dimension with
    the greatest stride in memory).
$PARAMETER        ylen :
    The length of the second most significant dimension.
$PARAMETER        xlen :
    The length of the second least significant dimension.
$PARAMETER        wlen :
    The length of the least significant dimension.
$NOTE
    The names of the dimensions will be the defaults: "Axis 0",
    "Axis 1", "Axis 2" and "Axis 3", respectively.
$PARAMETER        type :
    The type of the data. See <-DS_KARMA_DATA_TYPES-> for a list of
    defined data types.
$NOTE
    The name of the element will be the default name: "Intensity".
$RETURNS
    A dynamically allocated intelligent array on success, else NULL.
$END

$FUNCTION         iarray_put_float
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, CONST char *name, float value)
$SUMMARY          Attach a float data value to an Intelligent Array.
$PURPOSE
    This routine will put a unique named float value into the
    underlying Karma general data structure of an "Intelligent Array".
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        name :
    The name of the element.
$PARAMETER        value :
    The value of the data.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_put_int
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, CONST char *name, int value)
$SUMMARY          Attach an integer data value to an Intelligent Array.
$PURPOSE
    This routine will put a unique named integer value into the
    underlying Karma general data structure of an "Intelligent Array".
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        name :
    The name of the element.
$PARAMETER        value :
    The value of the data.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_get_float
$RETURN_TYPE      float
$PARAMETER_LIST
    (iarray array, CONST char *name)
$SUMMARY          Get attached float from an Intelligent Array.
$PURPOSE
    This routine will get a unique named float value from the
    underlying Karma general data structure of an "Intelligent Array".
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        name :
    The name of the element.
$RETURNS
    The value on success, else the process is aborted on error.
$END

$FUNCTION         iarray_get_int
$RETURN_TYPE      int
$PARAMETER_LIST
    (iarray array, CONST char *name)
$SUMMARY          Get attached integer from an Intelligent Array.
$PURPOSE
    This routine will get a unique named integer value from the
    underlying Karma general data structure of an "Intelligent Array".
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        name :
    The name of the element.
$RETURNS
    The value on success, else the process is aborted on error.
$END

$FUNCTION         iarray_fill_float
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, float value)
$SUMMARY          Fill an Intelligent Array with a single float value.
$PURPOSE
    Fill an Intelligent Array with a single float value.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        value :
    The fill value.
$NOTE
    If filling a complex array, both the real and imaginary components
    are filled with the fill value.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_fill_int
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, int value)
$SUMMARY          Fill an Intelligent Array with a single integer value.
$PURPOSE
    Fill an Intelligent Array with a single integer value.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        value :
    The fill value.
$NOTE
    If filling a complex array, both the real and imaginary components
    are filled with the fill value.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_min_max_float
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, float *min, float *max)
$SUMMARY          Determine the minimum and maximum value of an Intelligent Array.
$PURPOSE
    Determine the minimum and maximum value of an Intelligent Array.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        min :
    The routine will write the minimum value here.
$PARAMETER        max :
    The routine will write the maximum value here.
$NOTE
    If the array is a complex array, then the routine computes the
    minimum and maximum magnitudes.
$MT-LEVEL         Unsafe.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_min_max_int
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray array, int *min, int *max)
$SUMMARY          Determine the minimum and maximum value of an Intelligent Array.
$PURPOSE
    Determine the minimum and maximum value of an Intelligent Array.
$PARAMETER        array :
    The Intelligent Array.
$PARAMETER        min :
    The routine will write the minimum value here.
$PARAMETER        max :
    The routine will write the maximum value here.
$NOTE
    If the array is a complex array, then the routine computes the
    minimum and maximum magnitudes.
$MT-LEVEL         Unsafe.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_scale_and_offset_float
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray out, iarray inp, float scale, 
				    float offset)
$SUMMARY          Scale and offset an Intelligent Array.
$PURPOSE
    This routine will perform a scale and offset on every element in
    an "Intelligent Array" (output = input * scale + offset).
$PARAMETER        out :
    The output Intelligent Array.
$PARAMETER        inp :
    The input Intelligent Array.
$NOTE
    The input and output arrays MUST be the same size (though not
    necessarily the same type).
$PARAMETER        scale :
    The complex scale value.
$PARAMETER        offset :
    The complex offset value.
$NOTE
    When converting from a complex to a real array, the magnitude is
    scaled and offset.
$NOTE
    When converting from a real to a complex array, the imaginary
    component of the output array is set to 0.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         iarray_scale_and_offset_int
$RETURN_TYPE      flag
$PARAMETER_LIST
    (iarray out, iarray inp, int scale,int offset)
$SUMMARY          Scale and offset an Intelligent Array.
$PURPOSE
    This routine will perform a scale and offset on every element in
    an "Intelligent Array" (output = input * scale + offset).
$PARAMETER        out :
    The output Intelligent Array.
$PARAMETER        inp :
    The input Intelligent Array.
$NOTE
    The input and output arrays MUST be the same size (though not
    necessarily the same type).
$PARAMETER        scale :
    The complex scale value.
$PARAMETER        offset :
    The complex offset value.
$NOTE
    When converting from a complex to a real array, the magnitude is
    scaled and offset.
$NOTE
    When converting from a real to a complex array, the imaginary
    component of the output array is set to 0.
$RETURNS
    TRUE on success, else FALSE.
$END

$PROTO_FUNC       IARRAY_PROTO_destroy_func
$RETURN_TYPE      void
$PARAMETER_LIST
    (iarray array, void *info)
$SUMMARY          Register destruction of an Intelligent Array.
$PURPOSE
    Register destruction of an Intelligent Array.
$PARAMETER        array
    The Intelligent Array.
$PARAMETER        info
    A pointer to the arbitrary information.
$RETURNS
    Nothing.
$END
