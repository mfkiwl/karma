$PACKAGE          dm
$SUMMARY          Routines to manage events on (file) descriptors
$PURPOSE
    These routines are meant to provide a generic and simple to use descriptor
    management facility (ie. event processing on pipes, connections and
    terminals).
    NOTE: THIS PACKAGE IS WORK IN PROGRESS. THE INTERFACE MAY CHANGE IN THE
    NEXT RELEASE, POSSIBLY WITHOUT NOTICE.
$LIBRARY          karma
$LINKWITH         -lkarma
$END

$FUNCTION           dm_manage
$RETURN_TYPE        flag
$PARAMETER_LIST
    ( int fd, void *info, flag (*input_func) (),
		void (*close_func) (), flag (*output_func) (),
		flag (*exception_func) () )
$SUMMARY            Manage a file descriptor for events.
$PURPOSE
    This routine will manage a file descriptor for activity by
    registering callback routines. Only one set of callbacks may be registered
    per file descriptor.
$PARAMETER          fd :
    The file descriptor to manage.
$PARAMETER          info :
    The initial value of the arbitrary pointer associated with the
    managed descriptor. This pointer may be modified by the callback routines.
$PARAMETER          input_func :
    The routine which is called when new input occurrs on the
    descriptor. If this is NULL, no callback routine is installed. The
    prototype function is <-DM_PROTO_input_func->.
$PARAMETER          close_func :
    The routine which is called when the descriptor closes. If
    this is NULL, no callback routine is installed. The prototype function is
    <-DM_PROTO_close_func->.
$PARAMETER          output_func :
    The routine which is called when the descriptor becomes ready
    for output. If this is NULL, no callback routine is installed. The
    prototype function is <-DM_PROTO_output_func->.
$PARAMETER          exception_func :
    The routine which is called when exceptions occurr on the
    descriptor. If this is NULL, no callback routine is installed. The
    prototype function is <-DM_PROTO_exception_func->.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION           dm_unmanage
$RETURN_TYPE        void
$PARAMETER_LIST
    (int fd)
$SUMMARY            Terminate the management of a file descriptor for activity.
$PURPOSE
    Terminate the management of a file descriptor for activity.
$NOTE
    The routine will NOT close the descriptor (nor does it assume the
    descriptor is open).
$PARAMETER          fd :
    The descriptor to unmanage.
$RETURNS
    Nothing.
$END

$FUNCTION           dm_poll
$RETURN_TYPE        void
$PARAMETER_LIST
    (long timeout_ms)
$SUMMARY            Poll all managed descriptors for any activity.
$PURPOSE
    Poll all managed descriptors for any activity.
$PARAMETER          timeout_ms :
    The time (in milliseconds) to poll. If this is less than 0
    the routine will poll forever (until some activity occurs or a signal is
    caught).
$RETURNS
    Nothing.
$END

$PROTO_FUNC         DM_PROTO_input_func
$RETURN_TYPE        flag
$PARAMETER_LIST
    (int fd, void **info)
$SUMMARY            Input event callback.
$PURPOSE
    This routine is called when new input occurs on a descriptor.
$PARAMETER          fd :
    The file descriptor.
$PARAMETER          info :
    A pointer to the arbitrary information pointer. The pointer
    written here will persist until the descriptor is unmanaged (or a
    subsequent callback routine changes it).
$RETURNS
    TRUE if the descriptor is to remain managed and open, else it
    returns FALSE (indicating that the descriptor is to be unmanaged and
    closed). This routine MUST NOT unmanage or close the descriptor.
$NOTE
    The <<close_func>> will be called if this routine returns FALSE
$END

$PROTO_FUNC         DM_PROTO_close_func
$RETURN_TYPE        void
$PARAMETER_LIST
    (int fd, void *info)
$SUMMARY            Close event callback.
$PURPOSE
    This routine is called when a descriptor closes.
$PARAMETER          fd :
    The file descriptor. The descriptor MUST be capable of detecting
    closure if this routine is supplied (ie. this routine cannot be
    supplied for docks).
$PARAMETER          info :
    The arbitrary pointer for the managed descriptor.
$NOTE
    This routine MUST NOT unmanage the descriptor. The descriptor
    will be automatically unmanaged and deleted upon closure (even if no
    <<close_func>> is specified).
$NOTE
    Any unread data in the descriptor will be lost upon closure. The
    call to this function is the last chance to read this data.
$RETURNS
    Nothing.
$END

$PROTO_FUNC         DM_PROTO_output_func
$RETURN_TYPE        flag
$PARAMETER_LIST
    (int fd, void **info)
$SUMMARY            Output event callback.
$PURPOSE
    This routine is called when a descriptor becomes ready for
    writing.
$PARAMETER          fd :
    The file descriptor.
$PARAMETER          info :
    A pointer to the arbitrary information pointer. The pointer
    written here will persist until the descriptor is unmanaged (or a
    subsequent callback routine changes it).
$RETURNS
    TRUE if the descriptor is to remain managed and open, else it
    returns FALSE (indicating that the descriptor is to be unmanaged and
    closed). This routine MUST NOT unmanage or close the descriptor.
$NOTE
    The <<close_func>> will be called if this routine returns FALSE
$END

$PROTO_FUNC         DM_PROTO_exception_func
$RETURN_TYPE        flag
$PARAMETER_LIST
    (int fd, void **info)
$SUMMARY            Exception event callback.
$PURPOSE
    This routine is called when an exception occurrs on a descriptor.
$PARAMETER          fd :
    The file descriptor.
$PARAMETER          info :
    A pointer to the arbitrary information pointer. The pointer
    written here will persist until the descriptor is unmanaged (or a
    subsequent callback routine changes it).
$RETURNS
    TRUE if the descriptor is to remain managed and open, else it
    returns FALSE (indicating that the descriptor is to be unmanaged and
    closed). This routine MUST NOT unmanage or close the descriptor.
$NOTE
    The <<close_func>> will be called if this routine returns FALSE
$END
