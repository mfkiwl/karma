/*  Link with:    -lkarma  */
/*  This file describes the m_ package of routines in the Karma library.

    These routines are meant to provide a better memory allocation service
    than the malloc(3) call. The supplied allocation and deallocation routines
    perform periodic checks to see if array boundaries have been overrun.
    A set of memory manipulation and error message routines are also provided
    in this package.


    Written by		Richard Gooch	5-Jan-1996

    Last updated by	Richard Gooch	5-Jan-1996


*/

char *m_alloc (uaddr size)
/*  [PURPOSE] Allocate Virtual Memory.
    <size> The number of bytes to allocate.
    [MT-LEVEL] Safe under Solaris 2.
    [RETURNS] A pointer to the memory on success, else NULL.
    [NOTE] If the environment variable "M_ALLOC_DEBUG" is set to "TRUE" then
    the routine will print allocation debugging information.
    [NOTE] If the environment variable "M_ALLOC_FAST" is set to "TRUE" then NO
    periodic integrity check of memory is performed and no debugging
    information will be printed.
*/
/*---------------------------------------------------------------------------*/

void m_free (char *ptr)
/*  [PURPOSE] Free Virtual Memory.
    <ptr> The start of a previously allocated block of memory to be freed.
    [MT-LEVEL] Safe.
    [RETURNS] Nothing.
    [NOTE] If the environment variable "M_ALLOC_DEBUG" is set to "TRUE" then
    the routine will print deallocation debugging information.
*/
/*---------------------------------------------------------------------------*/

void m_error_notify (char *function_name, char *purpose)
/*---------------------------------------------------------------------------*/

void m_abort (char *name, char *reason)
/*---------------------------------------------------------------------------*/

unsigned int m_verify_memory_integrity (flag force)
/*  [PURPOSE] This routine will periodically verify memory integrity.
    <force> If TRUE, the check is forced, else the check is made periodically.
    [MT-LEVEL] Safe.
    [RETURNS] The number of corrupted blocks.
*/
/*---------------------------------------------------------------------------*/

void m_clear (char *memory, uaddr length)
/*  [PURPOSE] This routine will clear a block of memory
    <memory> The memory block to clear.
    <length> The length of the block (in bytes) to clear.
    [NOTE] The memory is cleared in long integers and chars.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

void m_copy (char *dest, CONST char *source, uaddr length)
/*  [PURPOSE] This routine will copy a block of memory.
    <dest> The destination block of memory.
    <source> The source block of memory.
    <length> The number of bytes to transfer. If this is zero, it is
    permissable for <<source>> and <<dest>> to be NULL.
    [NOTE] The routine copies long integers and chars.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

void m_copy_blocks (char *dest, CONST char *source, unsigned int dest_stride,
		    unsigned int source_stride, unsigned int block_size,
		    unsigned int num_blocks)
/*  [PURPOSE] This routine will copy blocks of data.
    <dest> The destination for the first block copy.
    <source> The source for the first block copy.
    <dest_stride> The spacing (in bytes) between destintion blocks.
    <source_stride> The spacing (in bytes) between source blocks.
    <block_size> The size of each block (in bytes).
    <num_blocks> The number of blocks to copy.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

void m_fill (char *dest, uaddr stride, CONST char *source,
	     uaddr size, unsigned int num)
/*  [PURPOSE] This routine will fill memory blocks with a specified value.
    <dest> The destination.
    <stride> The stride (in bytes) of destination blocks.
    <source> The fill block.
    <size> The size (in bytes) of the fill value block.
    <num> The number of destination blocks to fill.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

flag m_cmp (CONST char *block1, CONST char *block2, uaddr length)
/*  [PURPOSE] This routine will compare two blocks of memory.
    <block1> The first memory block.
    <block2> The second memory block.
    <length> The number of bytes to compare.
    [NOTE] The routine compares long integers and chars.
    [RETURNS] TRUE if the blocks are equal, else FALSE.
*/
/*---------------------------------------------------------------------------*/

char *m_dup (CONST char *original, uaddr size)
/*  [PURPOSE] This routine will duplicate a block of memory into a freshly
    allocated block.
    <original> The original block of memory.
    <size> The size in bytes of the block.
    [RETURNS] A pointer to a freshly allocated block which contains identical
    data as the orginal on success, else NULL.
*/
/*---------------------------------------------------------------------------*/

char *m_alloc_scratch (uaddr size, char *function_name)
/*  [PURPOSE] This routine will allocate a scratch block of memory, which may
    be re-used by many different routines. The block is reserved until a call
    is made to <<m_free_scratch>>.
    <size> The minimum size in bytes of the scratch block.
    <function_name> If the memory block is already reserved and this is not
    NULL the string is printed and the process aborts.
    If the memory block is already reserved and this is NULL the routine fails
    normally.
    [RETURNS] A pointer on success to a dynamically allocated block of memory
    which is valid until the next call to this routine, else NULL.
*/
/*---------------------------------------------------------------------------*/

void m_free_scratch ()
/*  [PURPOSE] This routine will free the scratch memory.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/
