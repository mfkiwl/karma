/*  Link with:    -lkarma  */
/*  This file describes the m_ package of routines in the Karma library.

    These routines are meant to provide a better memory allocation service
    than the malloc(3) call. The supplied allocation and deallocation routines
    perform periodic checks to see if array boundaries have been overrun.
    A set of memory manipulation and error message routines are also provided
    in this package.


    Written by		Richard Gooch	1-OCT-1992

    Last updated by	Richard Gooch	1-OCT-1992


*/

char *m_alloc (size)
/*  Allocate  size  bytes of Virtual Memory.
    If the environment variable "M_ALLOC_DEBUG" is set to "TRUE" then the
    routine will print allocation debugging information.
    The routine returns a pointer to the memory on success,
    else it returns NULL.
*/
unsigned int size ;
/*---------------------------------------------------------------------------*/

void m_free (p)
/*  Free memory pointed to by  p  .
    If the environment variable "M_ALLOC_DEBUG" is set to "TRUE" then the
    routine will print deallocation debugging information.
    The routine returns nothing.
*/
char *p ;
/*---------------------------------------------------------------------------*/

void m_error_notify (function_name, purpose)
char *function_name;
char *purpose;
/*---------------------------------------------------------------------------*/

void m_abort (name, reason)
char *name;
char *reason;
/*---------------------------------------------------------------------------*/

void m_clear (memory, length)
/*  This routine will clear a block of memory pointed to by  memory  .
    The length of the block (in chars) to clear must be given by  length  .
    The memory is cleared in long integers and chars.
    The routine returns nothing.
*/
char *memory;
unsigned int length;
/*---------------------------------------------------------------------------*/

void m_copy (dest, source, length)
/*  This routine will copy a block of memory pointed to by  source  to the
    block of memory pointed to by  dest  .
    The number of chars to transfer must be given by  length  .If this is zero,
    it is permissable for  source  and  dest  to be NULL.
    The routine copies long integers and chars.
    The routine returns nothing.
*/
char *dest;
char *source;
unsigned int length;
/*---------------------------------------------------------------------------*/

void m_copy_blocks (dest, source, dest_stride, source_stride, block_size,
		    num_blocks)
/*  This routine will copy blocks of data.
    The destination for the first block copy must be pointed to by  dest  .
    The source for the first block copy must be pointed to by  source  .
    The spacing (in bytes) between destintion blocks must be in  dest_stride  .
    The spacing (in bytes) between source blocks must be in  source_stride  .
    The size of each block (in bytes) must be given by  block_size  .
    The number of blocks to copy must be in  num_blocks  .
    The routine returns nothing.
*/
char *dest;
char *source;
unsigned int dest_stride;
unsigned int source_stride;
unsigned int block_size;
unsigned int num_blocks;
/*---------------------------------------------------------------------------*/

void m_fill (dest, stride, source, size, num)
/*  This routine will fill memory blocks with a specified value.
    The destination must be pointed to by  dest  .
    The stride (in bytes) of destination blocks must be given by  stride  .
    The fill value must be pointed to by  source  .
    The size (in bytes) of the fill value must be given by  size  .
    The number of destination blocks to fill must be given by  num  .
    The routine returns nothing.
*/
char *dest;
unsigned int stride;
char *source;
unsigned int size;
unsigned int num;
/*---------------------------------------------------------------------------*/

flag m_cmp (block1, block2, length)
/*  This routine will compare a block of memory pointed to by  block2  to the
    block of memory pointed to by  block1  .
    The number of chars to compare must be given by  length  .
    The routine copies long integers and chars.
    The routine returns TRUE if the blocks are equal, else it returns FALSE.
*/
char *block1;
char *block2;
unsigned int length;
/*---------------------------------------------------------------------------*/
