				KarmaLib

	A Structured Library for Signal and Image Processing


	Karma is a package for signal and image processing applications. It
  contains KarmaLib (the structured library and API) and a large number of
  modules (applications) to perform many standard tasks.

  KarmaLib provides routines to simplify the interface to the operating system.
  This includes process management and a powerful connection package.

  It also provides a highly extensible, recursive, heirarchical data structure
  with extensive library support. This data structure may be accessed in a very
  portable, generic fashion by applications and may also be accessed directly
  when speed is critical. By supplying powerful library routines, data
  structures may be accessed in an abstract way, removing the need for the
  applications programmer to write code to deal with complex data structures
  while also allowing users to pass increasingly complex data structures to
  modules without the need for recompiliation.
  The applications programmer is left to concentrate on processing simple
  sub-structures (typically 1 or 2 dimensional arrays) without incurring any
  processing overhead. Tiling of multi dimensional arrays is supported
  transparently, and, using special indexing techniques (also transparent to
  the application), incur no performance overhead.
  The library also supplies routines to allow the programmer to transfer data
  structures as objects to and from named objects (disc files and network
  connections) without requiring the programmer to pay any attention to data
  formats, byte swapping machines, word sizes, etc. All data transfers are
  highly optimised to take advantage of the features of any particular platform
  and operating system.
  In addition, data structures may be automatically memory mapped from disc
  into the process address space, yielding enormous peformance increases when
  reading large data structures from disc, and also saving swap space.

	KarmaLib is structured into many "packages", which are collections of
  routines. All the routines in each package have a designated prefix.
  For example, the data structure manipulation routines all have the prefix:
    ds_
  The include file needed for each package is based on the common prefix.
  For example:  karma_ds.h

  The packages are also layered. Level 1 packages are the lowest level, and
  depend directly on the operating system. Higher level packages are
  dependent on one or more packages at lower levels. A package at one level is
  not dependent on any other package at the same or higher level.
  The number of letters in a package's prefix indicates the level of the
  package. So, for example, the data structure manipulation routines are a
  level 2 package.

  In many cases, certain functionality is provided in packages at various
  levels. With few exceptions, the highest level packages are recommended for
  use, as these provide the greatest flexibility, ease of use and are also more
  highly optimised.

  The library is divided into a number of individual libraries. The "core"
  library is linked with  -lkarma  . This library depends on the Operating
  System and the termcap(3) library.
  The X11 interface to Karma must be linked with:  -lkarmaX11 -lXext -lX11
  The XView interface to Karma must be linked with:
    -lkarmaxview -lxview -lolgx -lX11
  The Xt interface to Karma must be linked with:
    -lkarmaXt -lXt -lX11
  The Karma graphics library must be linked with zero or more other libraries,
  depending on the platform.
    For X11 based graphics, compile with:
      -DX11
    and link with:
      -lkarmagraphics -lXext -lX11
    For VX based graphics, link with:
      -lkarmagraphics

  The Karma Widgets library is a collection of Xt widgets in alpha development:
  the normal structure of Karma is not followed here: not sure how to
  structure it yet. The documentation is in the source files :-)


	Below is a brief table of all the packages and the routines which they
  are comprised of. For the complete API for a package, see the file:
    <prefix>.doc  in this directory.
