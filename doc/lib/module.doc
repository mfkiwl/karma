/*  Link with:    -lkarma  */
/*  This file describes the module_ package of routines in the Karma
    library.

    These routines are meant to provide high level routines to perform
    initialisation and execution of generic modules.


    Written by		Richard Gooch	22-Aug-1995

    Last updated by	Richard Gooch	22-Aug-1995


*/

void module_run (argc, argv, name_string, version_string, decode_func,
		 max_incoming, max_outgoing, server)
/*  This routine will initialise and then run a generic module.
    The number of command line arguments must be given by  argc  .
    The command line arguments must be pointed to by  argv  .
    The name of the module must be given by  name_string  .
    The version date of the module must be given by  version_string  .
    The command line decode function must be pointed to by  decode_func  .The
    interface to this function is as follows:

    flag decode_func (command, fp)
    *   This function is called whenever a command string is to be processed.
        The command string will be pointed to by  command  .
	The output file must be pointed to by  fp  .
	The routine returns TRUE on success, else it returns FALSE (indicating
	that the module should terminate immediately).
    *
    char *command;
    FILE *fp;

    The maximum number of incoming "multi_array" protocol connections must be
    given by  max_incoming  .
    If this is less than 0, no connections are permitted. If this is 0, an
    unlimited number of connections is permitted.
    The maximum number of outgoing "multi_array" protocol connections must be
    given by  max_outgoing  .
    If this is less than 0, no connections are permitted. If this is 0, an
    unlimited number of connections is permitted.
    If the module can operate as a server (for any protocol), then the value of
    server  must be TRUE.
    The routine returns nothing. Upon return from the function, the module
    should exit.
*/
int argc;
char **argv;
char *name_string;
char *version_string;
flag (*decode_func) ();
int max_incoming;
int max_outgoing;
flag server;
/*---------------------------------------------------------------------------*/

void module_process_argvs (argc, argv, unknown_func)
/*  This routine will process a shell command line, using the
    panel_process_command_with_stack  routine.
    The number of command line arguments must be given by  argc  .
    The command line arguments must be pointed to by  argv  .These do not
    include command used to execute the process ( cf. main() ).
    If the command is not understood, then the command will be passed to the
    function pointed to by  unknown_func  .
    The interface to this function is given below:

    flag unknown_func (cmd, fp)
    *   This routine will process a command.
        The command must be pointed to by  cmd  .
	Output messages are directed to  fp  .
	The routine returns TRUE if more commands should be processed,
	else it returns FALSE, indicating that the "exit" command was entered.
    *
    char *cmd;
    FILE *fp;

    The routine returns nothing.
*/
int argc;
char **argv;
flag (*unknown_func) ();
/*---------------------------------------------------------------------------*/
