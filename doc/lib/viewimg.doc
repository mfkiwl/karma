/*  Link with:    -lkarmagraphics  */
/*  This file describes the viewimg_ package of routines in the Karma
    library.

    These routines are meant to provide a high level mechanism to create and
    manipulate viewable images (2-dimensional slices of Karma data structures).
    These viewable images utilise the world canvases available in the  canvas_
    package, hence the resulting code is device independent.


    Written by		Richard Gooch	22-Jan-1996

    Last updated by	Richard Gooch	22-Jan-1996


*/

flag viewimg_draw_edit_list (vimage, ilist)
/*  This routine will draw a list of edit objects to the 2-dimensional data
    associated with a viewable image object.
    The viewable image must be given by  vimage  .
    The list of edit objects must be given by  ilist  .
    The routine returns TRUE on success, else it returns FALSE.
*/
ViewableImage vimage;
KImageEditList ilist;
/*---------------------------------------------------------------------------*/

flag viewimg_draw_edit_object (vimage, object)
/*  This routine will draw one edit object to the 2-dimensional data
    associated with a viewable image object.
    The viewable image must be given by  vimage  .
    The first element in the instruction entry which is a pointer to a linked
    list must be the linked list of co-ordinates.
    The routine will draw the edit object pointed to by  object  .
    The routine returns TRUE on success, else it returns FALSE.
*/
ViewableImage vimage;
char *object;
/*---------------------------------------------------------------------------*/

void viewimg_init (KWorldCanvas canvas)
/*  This routine will initialise the  viewimg_  package for a particular
    world canvas. Calling this routine causes a number of callback routines
    internal to the  viewimg_  package to be registered with the canvas (such
    as refresh and position event callbacks). The use of this routine is
    optional at the moment: the routines which create viewable images perform
    this function automatically. In version 2.0 of Karma, this use of this
    routine before creating viewable images will become mandatory.
    The world canvas must be given by  canvas  .
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

ViewableImage viewimg_create_restr (KWorldCanvas canvas,
				    multi_array *multi_desc,
				    array_desc *arr_desc, char *slice,
				    unsigned int hdim, unsigned int vdim,
				    unsigned int elem_index,
				    unsigned num_restr,
				    char **restr_names, double *restr_values)
/*  [PURPOSE] This routine will create a PseudoColour viewable image object
    from a 2-dimensional slice of a Karma data structure. At a later time, this
    viewable image may be made visible. This routine will not cause the canvas
    to be refreshed.
    <canvas> The world canvas onto which the viewable image may be drawn. Many
    viewable images may be associated with a single canvas.
    <multi_desc> The  multi_array  descriptor which contains the Karma data
    structure. The routine increments the attachment count on the descriptor
    on successful completion. This may be NULL.
    <arr_desc> The array descriptor.
    <slice> The start of the slice data.
    <hdim> The dimension index of the horizontal dimension.
    <vdim> The dimension index of the vertical dimension.
    <elem_index> The element index in the data packets.
    <num_restr> The number of matched restrictions. If this is 0, no
    restrictions are recorded (this is the same as calling  viewimg_create  ).
    <restr_names> The restriction names.
    <restr_values> The restriction values.
    [NOTES] Restriction information is automatically deallocated when
    viewimg_destroy  is called.
    [NOTES] The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to  viewimg_destroy  ,otherwise shared memory segments could
    remain after the process exits.
    [RETURNS] A viewable image on success, NULL.
*/
/*---------------------------------------------------------------------------*/

ViewableImage viewimg_create (KWorldCanvas canvas, multi_array *multi_desc,
			      array_desc *arr_desc, char *slice,
			      unsigned int hdim, unsigned int vdim,
			      unsigned int elem_index)
/*  This routine will create a viewable image object from a 2-dimensional slice
    of a Karma data structure. At a later time, this viewable image may be made
    visible. This routine will not cause the canvas to be refreshed.
    The world canvas onto which the viewable image may be drawn must be given
    by  canvas  .Many viewable images may be associated with a single canvas.
    The  multi_array  descriptor which contains the Karma data structure must
    be pointed to by  multi_desc  .The routine increments the attachment count
    on the descriptor on successful completion.
    The array descriptor must be pointed to by  arr_desc  .
    The start of the slice data must be pointed to by  slice  .
    The dimension index of the horizontal dimension must be given by  hdim  .
    The dimension index of the vertical dimension must be given by  vdim  .
    The element index in the data packets must be given by  elem_index  .
    The routine may produce cache data which will vastly increase the speed of
    subsequent operations on this data. Prior to process exit, a call MUST be
    made to  viewimg_destroy  ,otherwise shared memory segments could remain
    after the process exits.
    The routine returns a viewable image on success, else it returns NULL.
*/
/*---------------------------------------------------------------------------*/

ViewableImage viewimg_create_from_iarray (KWorldCanvas canvas, iarray array,
					  flag swap)
/*  This function will create a viewable image object from a 2-dimensional
    Intelligant Array. At a later time, this viewable image may be made
    visible. This routine will not cause the canvas to be refreshed.
    The world canvas onto which the viewable image may be drawn must be given
    by  canvas  .Many viewable images may be associated with a single canvas.
    The Intelligent Array must be given by  array  .The underlying  multi_array
    data strucuture will have its attachment count incremented upon successful
    completion.
    If the y axis should be displayed horizontally, the value of  swap  must be
    TRUE.
    The routine may produce cache data which will vastly increase the speed of
    subsequent operations on this data. Prior to process exit, a call MUST be
    made to  viewimg_destroy  ,otherwise shared memory segments could remain
    after the process exits.
    The routine returns a viewable image on success, else it returns NULL.
*/
/*---------------------------------------------------------------------------*/

ViewableImage *viewimg_create_sequence (KWorldCanvas canvas,
					multi_array *multi_desc,
					array_desc *arr_desc, char *cube,
					unsigned int hdim, unsigned int vdim,
					unsigned int fdim,
					unsigned int elem_index)
/*  This routine will create a sequence of viewable image objects from a
    3-dimensional cube of a Karma data structure. At a later time, this
    sequence of viewable images may be made visible in any order.
    This routine will not cause the canvas to be refreshed.
    The world canvas onto which the viewable image may be drawn must be given
    by  canvas  .
    The  multi_array  descriptor which contains the Karma data structure must
    be pointed to by  multi_desc  .The routine increments the attachment count
    on the descriptor on successful completion.
    The array descriptor must be pointed to by  arr_desc  .
    The start of the cube data must be pointed to by  cube  .
    The dimension index of the horizontal dimension must be given by  hdim  .
    The dimension index of the vertical dimension must be given by  vdim  .
    The dimension index of the frame dimension (dimension containing the
    sequence) must be given by  fdim  .The number of frames is the same as the
    length of this dimension.
    The element index in the data packets must be given by  elem_index  .
    The routine may produce cache data which will vastly increase the speed of
    subsequent operations on this data. Prior to process exit, a call MUST be
    made to  viewimg_destroy  ,otherwise shared memory segments could remain
    after the process exits.
    An arbitrary number of dimension restrictions
    The routine returns a pointer to a dynamically allocated array of viewable
    image objects on success, else it returns NULL.
*/
/*---------------------------------------------------------------------------*/

ViewableImage viewimg_create_rgb (KWorldCanvas canvas, multi_array *multi_desc,
				  array_desc *arr_desc, char *slice,
				  unsigned int hdim, unsigned int vdim,
				  unsigned int red_index,
				  unsigned int green_index,
				  unsigned int blue_index, unsigned num_restr,
				  char **restr_names, double *restr_values)
/*  [PURPOSE] This routine will create a TrueColour viewable image object from
    a 2-dimensional slice of a Karma data structure. At a later time, this
    viewable image may be made visible. This routine will not cause the canvas
    to be refreshed.
    <canvas> The world canvas onto which the viewable image may be drawn. Many
    viewable images may be associated with a single canvas.
    <multi_desc> The  multi_array  descriptor which contains the Karma data
    structure. The routine increments the attachment count on the descriptor on
    successful completion. This may be NULL.
    <arr_desc> The array descriptor.
    <slice> The start of the slice data.
    <hdim> The dimension index of the horizontal dimension.
    <vdim> The dimension index of the vertical dimension.
    <red_index> The element index of the red component in the data packets.
    <green_index> The element index of the green component in the data packets.
    <blue_index> The element index of the blue component in the data packets.
    [NOTES] The 3 colour components must be of type  K_UBYTE  .
    <num_restr> The number of matched restrictions. If this is 0, no
    restrictions are recorded.
    <restr_names> The restriction names.
    <restr_values> The restriction values.
    [NOTES] Restriction information is automatically deallocated when
    viewimg_destroy  is called.
    [NOTES] The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to  viewimg_destroy  ,otherwise shared memory segments could
    remain after the process exits.
    [RETURNS] A viewable image on success, else NULL.
*/
/*---------------------------------------------------------------------------*/

ViewableImage *viewimg_create_rgb_sequence (KWorldCanvas canvas,
					    multi_array *multi_desc,
					    array_desc *arr_desc, char *cube,
					    unsigned int hdim,
					    unsigned int vdim,
					    unsigned int fdim,
					    unsigned int red_index,
					    unsigned int green_index,
					    unsigned int blue_index,
					    unsigned num_restr,
					    char **restr_names,
					    double *restr_values)
/*  [PURPOSE] This routine will create a sequence of TrueColour viewable image
    objects from a 3-dimensional cube of a Karma data structure. At a later
    time, this sequence of viewable images may be made visible in any order.
    This routine will not cause the canvas to be refreshed.
    <canvas> The world canvas onto which the viewable image may be drawn. Many
    viewable images may be associated with a single canvas.
    <multi_desc> The  multi_array  descriptor which contains the Karma data
    structure must. The routine increments the attachment count on the
    descriptor on successful completion. This may be NULL.
    <arr_desc> The array descriptor.
    <cube> The start of the cube data.
    <hdim> The dimension index of the horizontal dimension.
    <vdim> The dimension index of the vertical dimension.
    <fdim> The dimension index of the frame dimension (dimension containing the
    sequence). The number of frames is the same as the length of this dimension
    <red_index> The element index of the red component in the data packets.
    <green_index> The element index of the green component in the data packets.
    <blue_index> The element index of the blue component in the data packets.
    [NOTES] The 3 colour components must be of type  K_UBYTE  .
    <num_restr> The number of matched restrictions. If this is 0, no
    restrictions are recorded.
    <restr_names> The restriction names.
    <restr_values> The restriction values.
    [NOTES] Restriction information is copied into internally allocated
    storage.
    [NOTES] The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to  viewimg_destroy  ,otherwise shared memory segments could
    remain after the process exits.
    [RETURNS] A viewable image on success, else NULL.
*/
/*---------------------------------------------------------------------------*/

flag viewimg_make_active (ViewableImage vimage)
/*  [PURPOSE] This routine will make a viewable image the active image for its
    associated world canvas. The canvas is then refreshed (possibly resized),
    provided that the new viewable image was not already active.
    <vimage> The viewable image.
    [RETURNS] TRUE on success, else FALSE.
    [SEE ALSO] viewimg_set_active
*/
/*---------------------------------------------------------------------------*/

flag viewimg_set_active (ViewableImage vimage, flag refresh)
/*  [PURPOSE] This routine will make a viewable image the active image for its
    associated world canvas.
    <vimage> The viewable image.
    <refresh> If TRUE, the canvas is always refreshed, if FALSE, the canvas is
    not refreshed.
    [RETURNS] TRUE on success, else FALSE.
    [SEE ALSO] viewimg_make_active
*/
/*---------------------------------------------------------------------------*/

flag viewimg_register_data_change (ViewableImage vimage)
/*  This routine will register a change in the Karma data structure associated
    with a viewable image. If the viewable image is active, it will be
    immediately redrawn on its canvas.
    The viewable image must be given by  vimage  .
    The routine returns TRUE on success, else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/

void viewimg_destroy (ViewableImage vimage)
/*  This routine will destroy a viewable image. If this is not called prior to
    process exit, shared memory segments could remain after the process exits.
    The viewable image must be given by  vimage  .
    Note that the associated  multi_array  descriptor is also deallocated (or
    at least, the attachment count is decreased).
    The routine returns nothing.
*/
/*---------------------------------------------------------------------------*/

ViewableImage viewimg_get_active (KWorldCanvas canvas)
/*  This routine will get the active ViewableImage associated with a
    KWorldCanvas object.
    The canvas must be given by  canvas  .
    The routine returns the active viewable image on success, else it returns
    NULL (indicating no viewable image is active for the canvas).
*/
/*---------------------------------------------------------------------------*/

flag viewimg_test_active (ViewableImage vimage)
/*  This routine will test if a viewable image is the active image for its
    associated world canvas.
    The viewable image must be given by  vimage  .
    The routine returns TRUE on if the viewable image is actice,
    else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/

KCallbackFunc viewimg_register_position_event_func (KWorldCanvas canvas,
						    flag (*func) (),
						    void *f_info)
/*  [PURPOSE] This routine will register a position event function for a world
    canvas which has a number of ViewableImage objects associated with it.
    The position event function will be called whenever a position event on the
    canvas has not been consumed. Many position event functions may be
    registered per canvas. The first function registered is the first function
    called upon a position event.
    <canvas> The world canvas.
    <func> The function that is called when a position event occurs. The
    interface to this routine is as follows:
    [<pre>]
    flag func (ViewableImage vimage, double x, double y, void *value,
               unsigned int event_code, void *e_info, void **f_info,
	       double x_lin, double y_lin, unsigned int value_type)
    *   [PURPOSE] This routine is a position event consumer for a world canvas
        which has a number of ViewableImage objects associated with it.
	<viewimg> The active viewable image.
	<x> The horizontal world co-ordinate of the event.
	<y> The vertical world co-ordinate of the event.
	These values will have been transformed by the registered transform
	function (see  canvas_register_transform_func  ) for the associated
	world canvas.
	<value> A pointer to the data value in the viewable image corresponding
	to the event co-ordinates.
	<event_code> The arbitrary event code.
	<e_info> The arbitrary event information.
	<f_info> The arbitrary function information pointer.
	<x_lin> The linear horizontal world co-ordinate (the co-ordinate prior
	to the transform function being called).
	<y_lin> The linear vertical world co-ordinate (the co-ordinate prior
	to the transform function being called).
	<value_type> The type of the data value. This may be K_DCOMPLEX or
	K_UB_RGB.
	[RETURNS] TRUE if the event was consumed, else FALSE indicating that
	the event is still to be processed.
    *
    [</pre>]

    The initial arbitrary function information pointer must be given by  f_info
    The routine returns a handle to a KWorldCanvasPositionFunc object.
*/
/*---------------------------------------------------------------------------*/

flag viewimg_fill_ellipse (ViewableImage vimage,
			   double centre_x, double centre_y,
			   double radius_x, double radius_y, double value[2])
/*  This routine will draw a filled ellipse into a 2 dimensional slice of
    data associated with a viewable image.
    The viewable image must be given by  vimage  .
    The world co-ordinates of the centre of the ellipse must be given by
    centre_x  and centre_y  .
    The radii must be given by  radius_x  and  radius_y  .
    The complex value to fill the ellipse with must be pointed to be  value  .
    This must be of type K_DCOMPLEX.
    The routine returns TRUE on success, else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/

flag viewimg_fill_polygon (ViewableImage vimage, edit_coord *coords,
			   unsigned int num_vertices, double value[2])
/*  This routine will draw a filled polygon into a 2 dimensional slice of data
    associated with a viewable image.
    The viewable image must be given by  vimage  .
    The array of world co-ordinates of vertices of the polygon must be pointed
    to by  coords  .
    The number of vertices in the polygon must be given by  num_vertices  .
    The complex value to fill the polygon with must be pointed to be  value  .
    This must be of type K_DCOMPLEX.
    The routine returns TRUE on success, else it returns FALSE.
*/
/*---------------------------------------------------------------------------*/

void viewimg_get_canvas_attributes (KWorldCanvas canvas, ...)
/*  [PURPOSE] This routine will get the attributes for a world canvas.
    <canvas> The world canvas.
    [VARARGS] The list of parameter attribute-key attribute-value pairs must
    follow. This list must be terminated with the value  VIEWIMG_ATT_END  .
    See the documentation for the <viewimg_set_canvas_attributes> routine for
    legal attributes.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

void viewimg_set_canvas_attributes (KWorldCanvas canvas, ...)
/*  [PURPOSE] This routine will control the autoscaling options used when
    viewable images are displayed on their associated world canvas.
    <canvas> The world canvas.
    [VARARGS] The list of parameter attribute-key attribute-value pairs must
    follow. This list must be terminated with the value  VIEWIMG_ATT_END  .
    Legal attributes are:
  VIEWIMG_ATT_AUTO_X           Enable automatic horizontal scaling
  VIEWIMG_ATT_AUTO_Y           Enable automatic vertical scaling
  VIEWIMG_ATT_AUTO_V           Enable automatic intensity scaling
  VIEWIMG_ATT_INT_X            Force integer horizontal zoom-in/zoom-out factor
  VIEWIMG_ATT_INT_Y            Force integer vertical zoom-in/zoom-out factor
  VIEWIMG_ATT_MAINTAIN_ASPECT  Maintain data image aspect ratio
  VIEWIMG_ATT_ALLOW_TRUNCATION Allow shrunken images to be truncated.
    See the include file  karma_viewimg.h  for matching attribute types.
    [NOTE] The canvas is not refreshed by this operation.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

void viewimg_get_attributes (ViewableImage vimage, ...)
/*  [PURPOSE] This routine will get the attributes for a viewable image.
    <vimage> The ViewableImage.
    [VARARGS] The list of parameter attribute-key attribute-value pairs must
    follow. This list must be terminated with the value  VIEWIMG_VATT_END  .
    Legal attributes are:
  VIEWIMG_VATT_TRUECOLOUR                  Image is TrueColour
  VIEWIMG_VATT_ARRAY_DESC                  The array descriptor for the image
  VIEWIMG_VATT_SLICE                       Start of the image data
  VIEWIMG_VATT_HDIM                        The horizontal dimension
  VIEWIMG_VATT_VDIM                        The vertical dimension
  VIEWIMG_VATT_PSEUDO_INDEX                The PseudoColour element index
  VIEWIMG_VATT_RED_INDEX                   The TrueColour red element index
  VIEWIMG_VATT_GREEN_INDEX                 The TrueColour green element index
  VIEWIMG_VATT_BLUE_INDEX                  The TrueColour blue element index
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/
