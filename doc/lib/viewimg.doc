$PACKAGE          viewimg
$SUMMARY          Routines to manipulate viewable images
$PURPOSE
    These routines are meant to provide a high level mechanism to create and
    manipulate viewable images (2-dimensional slices of Karma data structures).
    These viewable images utilise the world canvases available in the
    <-canvas-> package, hence the resulting code is device independent.
$LIBRARY          karmagraphics
$LINKWITH         -lkarmagraphics
$END

$FUNCTION         viewimg_draw_edit_list
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage, KImageEditList ilist)
$SUMMARY          Draw edit list into array associated with viewable image.
$PURPOSE
    This routine will draw a list of edit objects to the
    2-dimensional data associated with a viewable image object.
$PARAMETER        vimage :
    The viewable image.
$PARAMETER        ilist :
    The list of edit objects.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         viewimg_draw_edit_object
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage, char *object)
$SUMMARY          Draw edit object into array associated with viewable image.
$PURPOSE
    This routine will draw one edit object to the 2-dimensional data
    associated with a viewable image object.
$PARAMETER        vimage :
    The viewable image.
$PARAMETER        object :
    The edit object.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         viewimg_init
$RETURN_TYPE      void
$PARAMETER_LIST
    (KWorldCanvas canvas)
$SUMMARY          Initialise the package for a particular canvas.
$PURPOSE
    This routine will initialise the <-viewimg-> package for a
    particular world canvas. Calling this routine causes a number of callback
    routines internal to the package to be registered with the canvas (such
    as refresh and position event callbacks). The use of this routine is
    optional at the moment: the routines which create viewable images perform
    this function automatically. In version 2.0 of Karma, this use of this
    routine before creating viewable images will become mandatory.
$PARAMETER        canvas :
    The world canvas object.
$RETURNS
    Nothing.
$END

$FUNCTION         viewimg_create_restr
$RETURN_TYPE      ViewableImage
$PARAMETER_LIST
    (KWorldCanvas canvas,
				    multi_array *multi_desc,
				    array_desc *arr_desc, char *slice,
				    unsigned int hdim, unsigned int vdim,
				    unsigned int elem_index,
				    unsigned num_restr,
				    char **restr_names, double *restr_values)
$SUMMARY          Create viewable image from 2D slice with restrictions.
$PURPOSE
    This routine will create a PseudoColour viewable image object
    from a 2-dimensional slice of a Karma data structure. At a later time, this
    viewable image may be made visible. This routine will not cause the canvas
    to be refreshed.
$PARAMETER        canvas :
    The world canvas onto which the viewable image may be drawn. Many
    viewable images may be associated with a single canvas.
$PARAMETER        multi_desc :
    The  multi_array  descriptor which contains the Karma data
    structure. The routine increments the attachment count on the descriptor
    on successful completion. This may be NULL.
$PARAMETER        arr_desc :
    The array descriptor.
$PARAMETER        slice :
    The start of the slice data.
$PARAMETER        hdim :
    The dimension index of the horizontal dimension.
$PARAMETER        vdim :
    The dimension index of the vertical dimension.
$PARAMETER        elem_index :
    The element index in the data packets.
$PARAMETER        num_restr :
    The number of matched restrictions. If this is 0, no
    restrictions are recorded (this is the same as calling <-viewimg_create->).
$PARAMETER        restr_names :
    The restriction names.
$PARAMETER        restr_values :
    The restriction values.
$NOTE
    Restriction information is automatically deallocated when
    <-viewimg_destroy-> is called.
$NOTE
    The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to <-viewimg_destroy->, otherwise shared memory segments could
    remain after the process exits.
$RETURNS
    A viewable image on success, NULL.
$END

$FUNCTION         viewimg_create
$RETURN_TYPE      ViewableImage
$PARAMETER_LIST
    (KWorldCanvas canvas, multi_array *multi_desc,
			      array_desc *arr_desc, char *slice,
			      unsigned int hdim, unsigned int vdim,
			      unsigned int elem_index)
$SUMMARY          Create viewable image from 2D slice.
$PURPOSE
    This routine will create a PseudoColour viewable image object
    from a 2-dimensional slice of a Karma data structure. At a later time, this
    viewable image may be made visible. This routine will not cause the canvas
    to be refreshed.
$PARAMETER        canvas :
    The world canvas onto which the viewable image may be drawn. Many
    viewable images may be associated with a single canvas.
$PARAMETER        multi_desc :
    The  multi_array  descriptor which contains the Karma data
    structure. The routine increments the attachment count on the descriptor
    on successful completion. This may be NULL.
$PARAMETER        arr_desc :
    The array descriptor.
$PARAMETER        slice :
    The start of the slice data.
$PARAMETER        hdim :
    The dimension index of the horizontal dimension.
$PARAMETER        vdim :
    The dimension index of the vertical dimension.
$PARAMETER        elem_index :
    The element index in the data packets.
$NOTE
    The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to <-viewimg_destroy->, otherwise shared memory segments could
    remain after the process exits.
$RETURNS
    A viewable image on success, NULL.
$END

$FUNCTION         viewimg_create_from_iarray
$RETURN_TYPE      ViewableImage
$PARAMETER_LIST
    (KWorldCanvas canvas, iarray array,
					  flag swap)
$SUMMARY          Create a viewable image from an Intelligent Array.
$PURPOSE
    This routine will create a viewable image object from a
    2-dimensional Intelligant Array. At a later time, this viewable image may
    be made visible. This routine will not cause the canvas to be refreshed.
    Many viewable images may be associated with a single canvas.
$PARAMETER        canvas :
    The world canvas object.
$PARAMETER        array :
    The Intelligent Array. The underlying <<multi_array>> data
    structure will have its attachment count incremented upon successful
    completion.
$PARAMETER        swap :
    If TRUE the y axis will be displayed horizontally.
$NOTE
    The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to <-viewimg_destroy->, otherwise shared memory segments could
    remain after the process exits.
$RETURNS
    A viewable image on success, else NULL.
$END

$FUNCTION         viewimg_create_sequence
$RETURN_TYPE      ViewableImage *
$PARAMETER_LIST
    (KWorldCanvas canvas,
					multi_array *multi_desc,
					array_desc *arr_desc, char *cube,
					unsigned int hdim, unsigned int vdim,
					unsigned int fdim,
					unsigned int elem_index)
$SUMMARY          Create a sequence of viewable images from a 3D slice.
$PURPOSE
    This routine will create a sequence of viewable image objects
    from a 3-dimensional cube of a Karma data structure. At a later time, this
    sequence of viewable images may be made visible in any order.
    This routine will not cause the canvas to be refreshed.
$PARAMETER        canvas :
    The world canvas object.
$PARAMETER        multi_desc :
    The  multi_array  descriptor which contains the Karma data
    structure. The routine increments the attachment count on the descriptor
    on successful completion. This may be NULL.
$PARAMETER        arr_desc :
    The array descriptor.
$PARAMETER        cube :
    The start of the cube data.
$PARAMETER        hdim :
    The dimension index of the horizontal dimension.
$PARAMETER        vdim :
    The dimension index of the vertical dimension.
$PARAMETER        fdim :
    The dimension index of the frame dimension (dimension containing the
    sequence). The number of frames is the same as the length of this
    dimension.
$PARAMETER        elem_index :
    The element index in the data packets.
$NOTE
    The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to <-viewimg_destroy->, otherwise shared memory segments could
    remain after the process exits.
$RETURNS
    A pointer to a dynamically allocated array of viewable image
    objects on success, else NULL.
$END

$FUNCTION         viewimg_create_rgb
$RETURN_TYPE      ViewableImage
$PARAMETER_LIST
    (KWorldCanvas canvas, multi_array *multi_desc,
				  array_desc *arr_desc, char *slice,
				  unsigned int hdim, unsigned int vdim,
				  unsigned int red_index,
				  unsigned int green_index,
				  unsigned int blue_index, unsigned num_restr,
				  char **restr_names, double *restr_values)
$SUMMARY          Create a TrueColour viewable image.
$PURPOSE
    This routine will create a TrueColour viewable image object from
    a 2-dimensional slice of a Karma data structure. At a later time, this
    viewable image may be made visible. This routine will not cause the canvas
    to be refreshed.
$PARAMETER        canvas :
    The world canvas onto which the viewable image may be drawn. Many
    viewable images may be associated with a single canvas.
$PARAMETER        multi_desc :
    The  multi_array  descriptor which contains the Karma data
    structure. The routine increments the attachment count on the descriptor on
    successful completion. This may be NULL.
$PARAMETER        arr_desc :
    The array descriptor.
$PARAMETER        slice :
    The start of the slice data.
$PARAMETER        hdim :
    The dimension index of the horizontal dimension.
$PARAMETER        vdim :
    The dimension index of the vertical dimension.
$PARAMETER        red_index :
    The element index of the red component in the data packets.
$PARAMETER        green_index :
    The element index of the green component in the data packets.
$PARAMETER        blue_index :
    The element index of the blue component in the data packets.
$NOTE
    The 3 colour components must be of type  K_UBYTE  .
$PARAMETER        num_restr :
    The number of matched restrictions. If this is 0, no
    restrictions are recorded.
$PARAMETER        restr_names :
    The restriction names.
$PARAMETER        restr_values :
    The restriction values.
$NOTE
    Restriction information is automatically deallocated when
    <-viewimg_destroy-> is called.
$NOTE
    The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to <-viewimg_destroy->, otherwise shared memory segments could
    remain after the process exits.
$RETURNS
    A viewable image on success, else NULL.
$END

$FUNCTION         viewimg_create_rgb_sequence
$RETURN_TYPE      ViewableImage *
$PARAMETER_LIST
    (KWorldCanvas canvas,
					    multi_array *multi_desc,
					    array_desc *arr_desc, char *cube,
					    unsigned int hdim,
					    unsigned int vdim,
					    unsigned int fdim,
					    unsigned int red_index,
					    unsigned int green_index,
					    unsigned int blue_index,
					    unsigned num_restr,
					    char **restr_names,
					    double *restr_values)
$SUMMARY          Create sequence of TrueColour viewable images from 3D slice.
$PURPOSE
    This routine will create a sequence of TrueColour viewable image
    objects from a 3-dimensional cube of a Karma data structure. At a later
    time, this sequence of viewable images may be made visible in any order.
    This routine will not cause the canvas to be refreshed.
$PARAMETER        canvas :
    The world canvas onto which the viewable image may be drawn. Many
    viewable images may be associated with a single canvas.
$PARAMETER        multi_desc :
    The  multi_array  descriptor which contains the Karma data
    structure must. The routine increments the attachment count on the
    descriptor on successful completion. This may be NULL.
$PARAMETER        arr_desc :
    The array descriptor.
$PARAMETER        cube :
    The start of the cube data.
$PARAMETER        hdim :
    The dimension index of the horizontal dimension.
$PARAMETER        vdim :
    The dimension index of the vertical dimension.
$PARAMETER        fdim :
    The dimension index of the frame dimension (dimension containing the
    sequence). The number of frames is the same as the length of this dimension
$PARAMETER        red_index :
    The element index of the red component in the data packets.
$PARAMETER        green_index :
    The element index of the green component in the data packets.
$PARAMETER        blue_index :
    The element index of the blue component in the data packets.
$NOTE
    The 3 colour components must be of type K_UBYTE.
$PARAMETER        num_restr :
    The number of matched restrictions. If this is 0, no
    restrictions are recorded.
$PARAMETER        restr_names :
    The restriction names.
$PARAMETER        restr_values :
    The restriction values.
$NOTE
    Restriction information is copied into internally allocated
    storage.
$NOTE
    The routine may produce cache data which will vastly increase the
    speed of subsequent operations on this data. Prior to process exit, a call
    MUST be made to <-viewimg_destroy->, otherwise shared memory segments could
    remain after the process exits.
$RETURNS
    A viewable image on success, else NULL.
$END

$FUNCTION         viewimg_make_active
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage)
$SUMMARY          Make viewable image active and possibly refresh.
$PURPOSE
    This routine will make a viewable image the active image for its
    associated world canvas. The canvas is then refreshed (possibly resized),
    provided that the new viewable image was not already active.
$PARAMETER        vimage :
    The viewable image.
$RETURNS
    TRUE on success, else FALSE.
$SEE_ALSO
    ALSO] <-viewimg_set_active->.
$END

$FUNCTION         viewimg_set_active
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage, flag refresh)
$SUMMARY          Make viewable image active with controlled refresh.
$PURPOSE
    This routine will make a viewable image the active image for its
    associated world canvas.
$PARAMETER        vimage :
    The viewable image.
$PARAMETER        refresh :
    If TRUE, the canvas is always refreshed, if FALSE, the canvas is
    not refreshed.
$RETURNS
    TRUE on success, else FALSE.
$SEE_ALSO
    ALSO] <-viewimg_make_active->.
$END

$FUNCTION         viewimg_register_data_change
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage)
$SUMMARY          Notify data for viewable image has changed.
$PURPOSE
    This routine will register a change in the Karma data structure
    associated with a viewable image. If the viewable image is active, it will
    be immediately redrawn on its canvas.
$PARAMETER        vimage :
    The viewable image.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         viewimg_destroy
$RETURN_TYPE      void
$PARAMETER_LIST
    (ViewableImage vimage)
$SUMMARY          Destroy viewable image.
$PURPOSE
    This routine will destroy a viewable image. If this is not called
    prior to process exit, shared memory segments could remain after the
    process exits.
$PARAMETER        vimage :
    The viewable image.
$NOTE
    The associated <<multi_array>> descriptor is also deallocated (or
    at least, the attachment count is decreased).
$RETURNS
    Nothing.
$END

$FUNCTION         viewimg_get_active
$RETURN_TYPE      ViewableImage
$PARAMETER_LIST
    (KWorldCanvas canvas)
$SUMMARY          Get the active ViewableImage associated with a world canvas.
$PURPOSE
    Get the active ViewableImage associated with a world canvas.
$PARAMETER        canvas :
    The world canvas object.
$RETURNS
    The active viewable image on success, else NULL (indicating no
    viewable image is active for the canvas).
$END

$FUNCTION         viewimg_test_active
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage)
$SUMMARY          Test if viewable image is active.
$PURPOSE
    This routine will test if a viewable image is the active image
    for its associated world canvas.
$PARAMETER        vimage :
    The viewable image.
$RETURNS
    TRUE if the viewable image is actice, else FALSE.
$END

$FUNCTION         viewimg_register_position_event_func
$RETURN_TYPE      KCallbackFunc
$PARAMETER_LIST
    (KWorldCanvas canvas,
						    flag (*func) (),
						    void *f_info)
$SUMMARY          Register position event callback.
$PURPOSE
    This routine will register a position event function for a world
    canvas which has a number of ViewableImage objects associated with it.
    The position event function will be called whenever a position event on the
    canvas has not been consumed. Many position event functions may be
    registered per canvas. The first function registered is the first function
    called upon a position event.
$PARAMETER        canvas :
    The world canvas object.
$PARAMETER        func :
    The function that is called when a position event occurs. The
    prototype function is <-VIEWIMG_PROTO_position_func->.
$PARAMETER        f_info :
    The initial arbitrary function information pointer.
$RETURNS
    A handle to a KWorldCanvasPositionFunc object.
$END

$FUNCTION         viewimg_fill_ellipse
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage,
			   double centre_x, double centre_y,
			   double radius_x, double radius_y, double value[2])
$SUMMARY          Draw an ellipse into an array associated with a viewable image.
$PURPOSE
    This routine will draw a filled ellipse into a 2 dimensional
    slice of data associated with a viewable image.
$PARAMETER        vimage :
    The viewable image.
$PARAMETER        centre_x :
    The horizontal world co-ordinate of the centre of the ellipse.
$PARAMETER        centre_y :
    The vertical world co-ordinate of the centre of the ellipse.
$PARAMETER        radius_x :
    The horizontal radius.
$PARAMETER        radius_y :
    The vertical radius.
$PARAMETER        value :
    The complex value to fill the ellipse. This must be of type
    K_DCOMPLEX.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         viewimg_fill_polygon
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage, edit_coord *coords,
			   unsigned int num_vertices, double value[2])
$SUMMARY          Draw a polygon into an array associated with a viewable image.
$PURPOSE
    This routine will draw a filled polygon into a 2 dimensional
    slice of data associated with a viewable image.
$PARAMETER        vimage :
    The viewable image.
$PARAMETER        coords :
    The array of world co-ordinates of vertices of the polygon.
$PARAMETER        num_vertices :
    The number of vertices in the polygon.
$PARAMETER        value :
    The complex value to fill the polygon with. This must be of type
    K_DCOMPLEX.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         viewimg_get_canvas_attributes
$RETURN_TYPE      void
$PARAMETER_LIST
    (KWorldCanvas canvas, ...)
$SUMMARY          Get the viewable image attributes for a world canvas.
$PURPOSE
    Get the viewable image attributes for a world canvas.
$PARAMETER        canvas :
    The world canvas object.
$PARAMETER        ... :
    The list of parameter attribute-key attribute-value-ptr pairs
    must follow. This list must be terminated with the VIEWIMG_ATT_END.
    See <-VIEWIMG_CANVAS_ATTRIBUTES-> for the list of attributes.
$RETURNS
    Nothing.
$END

$FUNCTION         viewimg_set_canvas_attributes
$RETURN_TYPE      void
$PARAMETER_LIST
    (KWorldCanvas canvas, ...)
$SUMMARY          Set the viewable image attributes for a world canvas.
$PURPOSE
    This routine will control the autoscaling options used when
    viewable images are displayed on their associated world canvas.
$PARAMETER        canvas :
    The world canvas.
$PARAMETER        ... :
    The list of parameter attribute-key attribute-value-ptr pairs
    must follow. This list must be terminated with the VIEWIMG_ATT_END.
    See <-VIEWIMG_CANVAS_ATTRIBUTES-> for the list of attributes.
$NOTE
    The canvas is not refreshed by this operation.
$RETURNS
    Nothing.
$END

$FUNCTION         viewimg_get_attributes
$RETURN_TYPE      void
$PARAMETER_LIST
    (ViewableImage vimage, ...)
$SUMMARY          Get the attributes for a viewable image.
$PURPOSE
    Get the attributes for a viewable image.
$PARAMETER        vimage :
    The ViewableImage.
$PARAMETER        ... :
    The list of parameter attribute-key attribute-value-ptr pairs
    must follow. This list must be terminated with the VIEWIMG_VATT_END. See
    <-VIEWIMG_VIMAGE_ATTRIBUTES-> for the list of attributes.
$RETURNS
    Nothing.
$END

$FUNCTION         viewimg_get_worldcanvas
$RETURN_TYPE      KWorldCanvas
$PARAMETER_LIST
    (ViewableImage vimage)
$SUMMARY          Get the world canvas for a viewable image.
$PURPOSE
    Get the world canvas for a viewable image.
$PARAMETER        vimage :
    The ViewableImage object.
$RETURNS
    The KWorldCanvas object.
$END

$PROTO_FUNC       VIEWIMG_PROTO_position_func
$RETURN_TYPE      flag
$PARAMETER_LIST
    (ViewableImage vimage, double x, double y,
				  void *value, unsigned int event_code,
				  void *e_info, void **f_info,
				  double x_lin, double y_lin,
				  unsigned int value_type)
$SUMMARY          Position event callback.
$PURPOSE
    This routine is a position event consumer for a world canvas
    which has a number of ViewableImage objects associated with it.
$PARAMETER        viewimg :
    The active viewable image.
$PARAMETER        x :
    The horizontal world co-ordinate of the event.
$PARAMETER        y :
    The vertical world co-ordinate of the event.
    These values will have been transformed by the registered transform
    function (see <-canvas_register_transform_func->) for the associated
    world canvas.
$PARAMETER        value :
    A pointer to the data value in the viewable image corresponding
    to the event co-ordinates.
$PARAMETER        event_code :
    The arbitrary event code.
$PARAMETER        e_info :
    The arbitrary event information.
$PARAMETER        f_info :
    The arbitrary function information pointer.
$PARAMETER        x_lin :
    The linear horizontal world co-ordinate (the co-ordinate prior
    to the transform function being called).
$PARAMETER        y_lin :
    The linear vertical world co-ordinate (the co-ordinate prior
    to the transform function being called).
$PARAMETER        value_type :
    The type of the data value. This may be K_DCOMPLEX or
    K_UB_RGB.
$RETURNS
    TRUE if the event was consumed, else FALSE indicating that
    the event is still to be processed.
$END

$TABLE            VIEWIMG_CANVAS_ATTRIBUTES
$COLUMNS          4
$SUMMARY          List of canvas attributes for viewable images
$TABLE_DATA
|.Name                         |,Get Type  |,Set Type  |,Meaning
|.
|.VIEWIMG_ATT_END              |,          |,          |,End of varargs list
|.VIEWIMG_ATT_AUTO_X           |,flag *    |,flag      |,Enable automatic horizontal scaling
|.VIEWIMG_ATT_AUTO_Y           |,flag *    |,flag      |,Enable automatic vertical scaling
|.VIEWIMG_ATT_AUTO_V           |,flag *    |,flag      |,Enable automatic intensity scaling
|.VIEWIMG_ATT_INT_X            |,flag *    |,flag      |,Force integer horizontal zoom-in/zoom-out factor
|.VIEWIMG_ATT_INT_Y            |,flag *    |,flag      |,Force integer vertical zoom-in/zoom-out factor
|.VIEWIMG_ATT_MAINTAIN_ASPECT  |,flag *    |,flag      |,Maintain data image aspect ratio
|.VIEWIMG_ATT_ALLOW_TRUNCATION |,flag *    |,flag      |,Allow shrunken images to be truncated.
$END

$TABLE            VIEWIMG_VIEWIMG_ATTRIBUTES
$COLUMNS          4
$SUMMARY          List of attributes for viewable images
$TABLE_DATA
|.Name                      |,Get Type       |,Set Type     |,Meaning
|.
|.VIEWIMG_VATT_END          |,               |,             |,End of varargs list
|.VIEWIMG_VATT_TRUECOLOUR   |,flag *         |,flag         |,Image is TrueColour
|.VIEWIMG_VATT_ARRAY_DESC   |,array_desc **  |,array_desc * |,The array descriptor for the image
|.VIEWIMG_VATT_SLICE        |,char **        |,char *       |,Start of the image data
|.VIEWIMG_VATT_HDIM         |,unsigned int * |,unsigned int |,The horizontal dimension
|.VIEWIMG_VATT_VDIM         |,unsigned int * |,unsigned int |,The vertical dimension
|.VIEWIMG_VATT_PSEUDO_INDEX |,unsigned int * |,unsigned int |,The PseudoColour element index
|.VIEWIMG_VATT_RED_INDEX    |,unsigned int * |,unsigned int |,The TrueColour red element index
|.VIEWIMG_VATT_GREEN_INDEX  |,unsigned int * |,unsigned int |,The TrueColour green element index
|.VIEWIMG_VATT_BLUE_INDEX   |,unsigned int * |,unsigned int |,The TrueColour blue element index
$END
