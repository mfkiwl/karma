$PACKAGE          p
$SUMMARY          Low level routines to convert data
$PURPOSE
    These routines are meant to provide a low level means of converting C data
    types to the "network" data format (ie. big endian, IEEE 754).
    These are memory to memory routines only. Although they are made public,
    their use is NOT recommended.
    When reading or writing raw data from and to files or connections, the
    <-pio-> routines are suggested.
$LIBRARY          karma
$LINKWITH         -lkarma
$END

$FUNCTION         p_write_buf_float
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, float data)
$SUMMARY          Write a floating point number to a buffer.
$PURPOSE
    Write a floating point number to a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 4 bytes long
$PARAMETER        data :
    The data. This must be in host natural byte order. The data will be
    converted to IEEE network format prior to writing.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_read_buf_float
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, float *data)
$SUMMARY          Read a floating point number from a buffer.
$PURPOSE
    Read a floating point number from a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 4 bytes long
$PARAMETER        data :
    The output data will be written here. This will be in host natural
    byte order. The data will be converted from network byte order after
    reading.
$NOTE
    The data will be converted from IEEE network format after reading.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_write_buf_double
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, double data)
$SUMMARY          Write a double precision floating point number to a buffer.
$PURPOSE
    Write a double precision floating point number to a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 8 bytes long
$PARAMETER        data :
    The data. This must be in host natural byte order. The data will be
    converted to IEEE network format prior to writing.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_read_buf_double
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, double *data)
$SUMMARY          Read a double precision floating point number from a buffer.
$PURPOSE
    Read a double precision floating point number from a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 8 bytes long
$PARAMETER        data :
    The output data will be written here. This will be in host natural
    byte order. The data will be converted from network byte order after
    reading.
$NOTE
    The data will be converted from IEEE network format after reading.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_write_buf16s
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, long data)
$SUMMARY          Write 16 bits of signed data to a buffer,
$PURPOSE
    Write 16 bits of signed data to a buffer,
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 2 bytes long
$PARAMETER        data :
    The data. This must be in host natural byte order. The data will be
    converted to network byte order prior to writing.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_read_buf16s
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, long *data)
$SUMMARY          Read 16 bits of signed data from a buffer.
$PURPOSE
    Read 16 bits of signed data from a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 2 bytes long
$PARAMETER        data :
    The output data will be written here. This will be in host natural
    byte order. The data will be converted from network byte order after
    reading.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_write_buf32s
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, long data)
$SUMMARY          Write 32 bits of signed data to a buffer,
$PURPOSE
    Write 32 bits of signed data to a buffer,
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 2 bytes long
$PARAMETER        data :
    The data. This must be in host natural byte order. The data will be
    converted to network byte order prior to writing.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_read_buf32s
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, long *data)
$SUMMARY          Read 32 bits of signed data from a buffer.
$PURPOSE
    Read 32 bits of signed data from a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 2 bytes long
$PARAMETER        data :
    The output data will be written here. This will be in host natural
    byte order. The data will be converted from network byte order after
    reading.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_write_buf16
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, unsigned long data)
$SUMMARY          Write 16 bits of unsigned data to a buffer,
$PURPOSE
    Write 16 bits of unsigned data to a buffer,
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 2 bytes long
$PARAMETER        data :
    The data. This must be in host natural byte order. The data will be
    converted to network byte order prior to writing.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_read_buf16
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, unsigned long *data)
$SUMMARY          Read 16 bits of unsigned data from a buffer.
$PURPOSE
    Read 16 bits of unsigned data from a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 2 bytes long
$PARAMETER        data :
    The output data will be written here. This will be in host natural
    byte order. The data will be converted from network byte order after
    reading.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_write_buf32
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, unsigned long data)
$SUMMARY          Write 32 bits of unsigned data to a buffer,
$PURPOSE
    Write 32 bits of unsigned data to a buffer,
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 4 bytes long
$PARAMETER        data :
    The data. This must be in host natural byte order. The data will be
    converted to network byte order prior to writing.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_read_buf32
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, unsigned long *data)
$SUMMARY          Read 32 bits of unsigned data from a buffer.
$PURPOSE
    Read 32 bits of unsigned data from a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 4 bytes long
$PARAMETER        data :
    The output data will be written here. This will be in host natural
    byte order. The data will be converted from network byte order after
    reading.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_write_buf64
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, unsigned long data)
$SUMMARY          Write 64 bits of data to a buffer.
$PURPOSE
    Write 64 bits of data to a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 8 bytes long
$PARAMETER        data :
    The data. This must be in host natural byte order. The data will be
    converted to network byte order prior to writing.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         p_read_buf64
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *buffer, unsigned long *data)
$SUMMARY          Read 64 bits of signed data from a buffer.
$PURPOSE
    Read 64 bits of signed data from a buffer.
$PARAMETER        buffer :
    A pointer to the buffer. This buffer must be at least 8 bytes long
$PARAMETER        data :
    The output data will be written here. This will be in host natural
    byte order. The data will be converted from network byte order after
    reading.
$RETURNS
    TRUE on success, else FALSE.
$END
