$PACKAGE          r
$SUMMARY          Low level connection routines
$PURPOSE
    These routines are meant to provide a low level mechanism to create and
    accept connections. Although these routines are made public, their use is
    NOT recommended. The <-conn-> package is the suggested means to create and
    accept connections.
$LIBRARY          karma
$LINKWITH         -lkarma
$END

$FUNCTION         r_alloc_port
$RETURN_TYPE      int *
$PARAMETER_LIST
    (unsigned int *port_number, unsigned int retries,
		   unsigned int *num_docks)
$SUMMARY          Allocate a Karma port whic can receive connections.
$PURPOSE
    This routine will allocate a Karma port for the module so that it
    can operate as a server (able to receive network connections).
    The routine will create a number of docks for one port. Each dock is an
    alternative access point for other modules to connect to this port.
    The close-on-exec flags of the docks are set such that the docks will
    close on a call to execve(2V).
    The docks are placed into non-blocking mode.
$PARAMETER        port_number :
    A pointer to the port number to allocate. The routine will
    write the actual port number allocated to this address. This must point to
    an address which lies on an <<int>> boundary.
$PARAMETER        retries :
    The number of succsessive port numbers to attempt to allocate
    before giving up. If this is 0, then the routine will give up immediately
    if the specified port number is in use.
$PARAMETER        num_docs :
    The number of docks allocated will be written here. This must
    point to an address which lies on an <<int>> boundary.
$RETURNS
    A pointer to a statically allocated array of docks on success,
    else NULL.
$END

$FUNCTION         r_close_dock
$RETURN_TYPE      void
$PARAMETER_LIST
    (int dock)
$SUMMARY          Close a dock.
$PURPOSE
    This routine will close a dock. If the dock was the last open
    dock for the port, then the entire port is closed and a new port may be
    allocated.
$PARAMETER        dock :
    The dock to close.
$RETURNS
    Nothing.
$END

$FUNCTION         r_connect_to_port
$RETURN_TYPE      int
$PARAMETER_LIST
    (unsigned long addr, unsigned int port_number,
		       flag *local)
$SUMMARY          Make a connection to a Karma port on some machine.
$PURPOSE
    Make a connection to a Karma port on some machine.
$PARAMETER        addr :
    The address of the machine to connect to. If the value of 0 is
    supplied for the address, the connection is made to a Karma server running
    on the local machine.
$PARAMETER        port_number :
    The port number to connect to.
$PARAMETER        local :
    If the connection is made to a port on the local host, then the
    value TRUE will be written here, else the value FALSE will be written here.
$NOTE
    The close-on-exec flags of the socket is set such that the socket
    will close on a call to execve(2V).
$RETURNS
    The file descriptor of the opened connection on success, else -1.
$END

$FUNCTION         r_accept_connection_on_dock
$RETURN_TYPE      int
$PARAMETER_LIST
    (int dock, unsigned long *addr, flag *local)
$SUMMARY          Accept a connection on a dock.
$PURPOSE
    Accept a connection on a dock.
$PARAMETER        dock :
    The dock.
$PARAMETER        addr :
    The address of the host connecting to the dock will be written here.
$PARAMETER        local :
    If the connection is a local connection, then the routine will
    write the value TRUE here, else it will write the value FALSE.
$RETURNS
    A connection on success, else -1.
$END

$FUNCTION         r_close_connection
$RETURN_TYPE      flag
$PARAMETER_LIST
    (int connection)
$SUMMARY          Close a connection.
$PURPOSE
    Close a connection.
$PARAMETER        connection :
    The connection to close.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         r_get_bytes_readable
$RETURN_TYPE      int
$PARAMETER_LIST
    (int connection)
$SUMMARY          Get bytes readable on a connection.
$PURPOSE
    This routine will determine the minimum number of bytes readable
    on a connection. There may be more bytes readable than indicated.
$PARAMETER        connection :
    The connection.
$RETURNS
    The number of bytes readable on success, else -1.
$END

$FUNCTION         r_get_inet_addr_from_host
$RETURN_TYPE      unsigned long
$PARAMETER_LIST
    (CONST char *host, flag *local)
$SUMMARY          Get the first listed Internet address of a hostname.
$PURPOSE
    Get the first listed Internet address of a hostname.
$PARAMETER        host :
    The hostname.
$PARAMETER        local :
    If the specified host is the local machine, then the routine will
    write the value TRUE here, else it will write the value FALSE here. If
    this is NULL, nothing is written here.
$RETURNS
    The Internet address on success (in host byte order), else 0.
$END

$FUNCTION         r_read
$RETURN_TYPE      int
$PARAMETER_LIST
    (int fd, char *buf, int nbytes)
$SUMMARY          Read bytes from a file descriptor.
$PURPOSE
    This routine is similar to the system <<read(2)>> call, except
    that the number of bytes requested is always returned (except on error or
    closure). Hence, if the descriptor references a socket, the routine will
    read as much data as was requested, rather than a lesser amount due to
    packetisation or interrupted system calls.
$PARAMETER        fd :
    The file descriptor to read from. This descriptor must NOT be set to
    non-blocking IO.
$PARAMETER        buf :
    The buffer in which to write the data.
$PARAMETER        nbytes :
    The number of bytes to read.
$RETURNS
    The number of bytes requested on success, the number of bytes
    read on end of file (or closure) and -1 on error.
$END

$FUNCTION         r_write
$RETURN_TYPE      int
$PARAMETER_LIST
    (int fd, CONST char *buf, int nbytes)
$SUMMARY          Write bytes to a file descriptor.
$PURPOSE
    This routine is similar to the system <<write(2)>> call, except
    that the number of bytes requested is always returned (except on error).
    Hence, if the descriptor references a socket, the routine will write as
    much data as was requested, rather than a lesser amount due to
    packetisation or interrupted system calls.
$PARAMETER        fd :
    The file descriptor to write to. This descriptor must NOT be set to
    non-blocking IO.
$PARAMETER        buf :
    The buffer in which to write the data.
$PARAMETER        nbytes :
    The number of bytes to write.
$NOTE
    The routine will force  SIGPIPE  to be ignored.
$RETURNS
    The number of bytes requested on success, else -1 indicating
    error.
$END

$FUNCTION         r_test_input_event
$RETURN_TYPE      flag
$PARAMETER_LIST
    (int connection)
$SUMMARY          Test for activity on a connection.
$PURPOSE
    This routine will test if there is input activity on a
    connection. This activity also covers the case of connection closure. The
    connection descriptor must be given by  connection  .
$NOTE
    This routine is only available on platforms which emulate the
    communications facilities of Unix. It is NOT available on standard Unix
    systems.
$RETURNS
    TRUE if there is some input activity, else FALSE.
$END

$FUNCTION         r_open_stdin
$RETURN_TYPE      int
$PARAMETER_LIST
    (flag *disc)
$SUMMARY          Open the standard input.
$PURPOSE
    Open the standard input.
$PARAMETER        disc :
    The routine will write the value TRUE here if the standard input is
    a disc, else it will write FALSE.
$RETURNS
    The descriptor on success, else -1.
$END

$FUNCTION         r_getenv
$RETURN_TYPE      char *
$PARAMETER_LIST
    (CONST char *name)
$SUMMARY          Get the value of an environment variable.
$PURPOSE
    Get the value of an environment variable.
$PARAMETER        name :
    The name of the environment variable.
$RETURNS
    A pointer to the value string if present, else NULL.
$END

$FUNCTION         r_setenv
$RETURN_TYPE      int
$PARAMETER_LIST
    (CONST char *env_name, CONST char *env_value)
$SUMMARY          Set an environment variable.
$PURPOSE
    This routine will provide a consistent interface to set
    environment variables. This is necessary because the "standard" C library
    routines: <<putenv>> or <<setenv>> (depending on the particular standard
    C library supplied with the operating system) are in fact not standard.
$PARAMETER        env_name :
    The environment variable to create or change.
$PARAMETER        env_value :
    The string value to set the variable to.
$RETURNS
    0 on success, else -1.
$END

$FUNCTION         r_gethostname
$RETURN_TYPE      void
$PARAMETER_LIST
    (char *name, unsigned int namelen)
$SUMMARY          This routine will determine the local hostname.
$PURPOSE
    This routine will determine the local hostname.
$PARAMETER        name :
    The hostname will be written here. It is guaranteed to be null
    terminated.
$PARAMETER        namelen :
    The size of the buffer.
$RETURNS
    Nothing.
$END

$FUNCTION         r_get_fq_hostname
$RETURN_TYPE      flag
$PARAMETER_LIST
    (char *name, unsigned int namelen)
$SUMMARY          This routine will get the fully qualified local hostname.
$PURPOSE
    This routine will get the fully qualified local hostname.
$PARAMETER        name :
    The hostname will be written here. It is guaranteed to be null
    terminated.
$PARAMETER        namelen :
    The size of the buffer.
$RETURNS
    TRUE on success, else FALSE.
$END

$FUNCTION         r_getppid
$RETURN_TYPE      int
$PARAMETER_LIST
    ()
$SUMMARY          Get the parent process ID.
$PURPOSE
    Get the parent process ID.
$RETURNS
    The parent process ID.
$END

$FUNCTION         r_open_file
$RETURN_TYPE      int
$PARAMETER_LIST
    (CONST char *filename, int flags, int mode,
		 unsigned int *filetype, unsigned int *blocksize)
$SUMMARY          Open a named file.
$PURPOSE
    This routine will open a file. The file may be a regular disc
    file, a named FIFO, a character special device, a Unix domain socket or a
    TCP/IP connection (where supported). This routine provides an enhanced
    interface to the <<open(2)>>, <<socket(2)>> and <<connect(2)>> routines.
$PARAMETER        filename :
    The pathname of the file to open. This parameter has the same
    meaning as the first parameter to <<open(2)>>.
    Filenames of the form: "//tcpIP/{hostname}:{port}" indicate a connection to
    a TCP/IP port on host {hostname} with raw port number {port} is
    requested.
$PARAMETER        flags :
    The access flags. This parameter has the same meaning as the second
    parameter to <<open(2)>>.
$PARAMETER        mode :
    If the file is created, the file protection modes will be determined
    by the combination of the process  umask  and this value. This parameter
    has the same meaning as the third parameter to <<open(2)>>.
$PARAMETER        filetype :
    The type of the file will be written here.
$PARAMETER        blocksize :
    The blocksize (in bytes) of the file will be written here (this
    is only valid for a disc file). If the blocksize cannot be determined, the
    value 0 will be written here.
$RETURNS
    The file descriptor on success, else -1 and sets <<errno>> with
    the error code.
$END

$FUNCTION         r_create_pipe
$RETURN_TYPE      int
$PARAMETER_LIST
    (int *read_fd, int *write_fd)
$SUMMARY          Create an un-named pipe.
$PURPOSE
    This routine will create an un-named pipe. This routine provides
    an enhanced interface to the <<pipe(2)>> routine.
$PARAMETER        read_fd :
    The file descriptor corresponding to the read end of the pipe
    will be written here.
$PARAMETER        write_fd :
    The file descriptor corresponding to the write end of the pipe
    will be written here.
$RETURNS
    0 on success, else -1 and sets <<errno>> with the error code.
$END

$FUNCTION         r_get_karmabase
$RETURN_TYPE      char *
$PARAMETER_LIST
    ()
$SUMMARY          Get the pathname of the installed runtime Karma.
$PURPOSE
    Get the pathname of the installed runtime Karma.
$RETURNS
    The pathname.
$END

$FUNCTION         r_get_service_number
$RETURN_TYPE      int
$PARAMETER_LIST
    (CONST char *module_name)
$SUMMARY          Get service number for a module.
$PURPOSE
    This routine uses a hashing function to determine the service
    number of a module.
$PARAMETER        module_name :
    The name of the module.
$RETURNS
    The service number.
$END

$FUNCTION         r_get_host_from_display
$RETURN_TYPE      char *
$PARAMETER_LIST
    (CONST char *display)
$SUMMARY          Get the hostname in a display string.
$PURPOSE
    This routine will get the hostname from a display string.
    The syntax for the display string is the same as for the X Windows system
    DISPLAY environmental variable.
$PARAMETER        display :
    The display string. If this is NULL, the host "unix" is returned.
$RETURNS
    A pointer to a statically allocated string which will contain the
    host name on success, else NULL.
    
$END

$FUNCTION         r_get_display_num_from_display
$RETURN_TYPE      int
$PARAMETER_LIST
    (CONST char *display)
$SUMMARY          Get display number from a display string.
$PURPOSE
    This routine will get the display number from a display string
    (following the X Windows system syntax for the DISPLAY environmental
    variable).
$PARAMETER        display :
    The display string. If this is NULL, the display number defaults
    to 0.
$RETURNS
    The display number on success, else -1.
$END

$FUNCTION         r_get_screen_num_from_display
$RETURN_TYPE      int
$PARAMETER_LIST
    (CONST char *display)
$SUMMARY          Get the screen number in a display string.
$PURPOSE
    This routine will get the screen number from a display string
    (following the X Windows system syntax for the DISPLAY environmental
    variable).
$PARAMETER        display :
    The display string. If this is NULL, the screen number defaults
    to 0.
$RETURNS
    The display number on success, else -1.
$END

$FUNCTION         r_get_def_port
$RETURN_TYPE      int
$PARAMETER_LIST
    (CONST char *module_name, CONST char *display)
$SUMMARY          Get the default Karma port number for a module.
$PURPOSE
    Get the default Karma port number for a module.
$PARAMETER        module_name :
    The module name.
$PARAMETER        display :
    The display string. The display number entry in the string is
    also used to compute the port number. The syntax for this string is the
    same as for the X Windows system DISPLAY environmental variable.
$NOTE
    This routine does not resolve multiple port numbers residing on the
    same machine.
$RETURNS
    The default port number on success, else -1.
$END
