/*  Link with:    -lkarma  */
/*  This file describes the aa_ package of routines in the Karma library.

    These routines are meant to provide general purpose associative array
    support. This can save a lot of code when you maintain lists of pairs of
    items (e.g. pairs of names and objects).
    NOTE: THIS PACKAGE IS WORK IN PROGRESS. THE INTERFACE MAY CHANGE IN THE
    NEXT RELEASE, POSSIBLY WITHOUT NOTICE.


    Written by		Richard Gooch	27-Jan-1996

    Last updated by	Richard Gooch	27-Jan-1996


*/

KAssociativeArray aa_create (void *info,
			     int (*key_compare_func) (void *key1, void *key2),
			     void *(*key_copy_func) (void *key,
						     uaddr length, flag *ok),
			     void (*key_destroy_func) (void *key),
			     void *(*value_copy_func) (void *value,
						       uaddr length, flag *ok),
			     void (*value_destroy_func) (void *value))
/*  [PURPOSE] This routine will create a general purpose associative array of
    key-value pairs.
    <info> Arbitrary information to be stored with the associative array.
    <key_compare_func> The function used to compare two keys. The interface to
    this routine is as follows:
    [<pre>]
    int key_compare_func (void *key1, void *key2)
    *   [PURPOSE] This routine will compare two keys.
        <key1> The first key.
	<key2> The second key.
	[RETURNS] 0 if the keys match, a negative number if <<key1>> is less
	than <<key2>>, a positive number if <<key1>> is greater than <<key2>>.
    *
    [</pre>]
    <key_copy_func> The function used to copy keys. The interface to this
    routine is as follows:
    [<pre>]
    void *key_copy_func (void *key, uaddr length, flag *ok)
    *   [PURPOSE] This routine will copy a key.
        <key> The key to copy.
	<length> The length of the key in bytes.
	<ok> The value TRUE will be written here on success, else FALSE is
	written here.
	[RETURNS] A copy of the key on success.
    *
    [</pre>]
    <key_destroy_func> The function used to destroy keys. The interface to this
    routine is as follows:
    [<pre>]
    void key_destroy_func (void *key)
    *   [PURPOSE] This routine will destroy keys.
        <key> The key to destroy.
	[RETURNS] Nothing.
    *
    [</pre>]
    <value_copy_func> The function used to copy values. The interface to this
    routine is as follows:
    [<pre>]
    void *value_copy_func (void *value, uaddr length, flag *ok)
    *   [PURPOSE] This routine will copy a value.
        <value> The value to copy.
	<length> The length of the value in bytes.
	<ok> The value TRUE will be written here on success, else FALSE is
	written here.
	[RETURNS] A copy of the value on success.
    *
    [</pre>]
    <value_destroy_func> The function used to destroy values. The interface to
    this routine is as follows:
    [<pre>]
    void value_destroy_func (void *value)
    *   [PURPOSE] This routine will destroy values.
        <value> The value to destroy.
	[RETURNS] Nothing.
    *
    [</pre>]
    [RETURNS] An associative array on success, else NULL.
*/
/*---------------------------------------------------------------------------*/

void *aa_get_info (KAssociativeArray aa)
/*  [PURPOSE] This routine will get the aribtrary information pointer stored
    with an associative array.
    <aa> The associative array.
    [RETURNS] The arbitrary information pointer.
*/
/*---------------------------------------------------------------------------*/

KAssociativeArrayPair aa_put_pair (KAssociativeArray aa,
				   void *key, uaddr key_length,
				   void *value, uaddr value_length,
				   unsigned int replacement_policy, flag front)
/*  [PURPOSE] This routine will add a key-value pair to an associative array.
    There must be no existing key-value pair with the same key.
    <aa> The associative array.
    <key> The key.
    <key_length> The length of the key, in bytes. If this is 0 and the
    <<key_copy_func>> is NULL, the key pointer is copied directly. If this is
    greater than zero and the <<key_copy_func>> is NULL, the specified number
    of bytes are copied.
    <value> The value.
    <value_length> The length of the value, in bytes. If this is 0 and the
    <<value_copy_func>> is NULL, the value pointer is copied directly. If this
    is greater than zero and the <<value_copy_func>> is NULL, the specified
    number of bytes are copied.
    <replacement_policy> The policy to use when adding the pair. Legal values:
        KAA_REPLACEMENT_POLICY_NEW         Fail if existing key found
        KAA_REPLACEMENT_POLICY_UPDATE      Fail if no existing key found
        KAA_REPLACEMENT_POLICY_PUT         Add pair, remove old key if exists
    <front> If TRUE and the key is new, place the pair at the front of the
    array. If FALSE and the key is new, place the pair at the end of the
    array.
    [RETURNS] A KAssociativeArrayPair object on success, else NULL.
*/
/*---------------------------------------------------------------------------*/

KAssociativeArrayPair aa_get_pair (KAssociativeArray aa, void *key,
				   void **value)
/*  [PURPOSE] This routine will find a key-value pair in an associative array.
    <aa> The associative array.
    <key> The key.
    <value> The value found will be written here on success.
    [RETURNS] A KAssociativeArrayPair object if the key was found, else NULL.
*/
/*---------------------------------------------------------------------------*/

void aa_destroy_pair (KAssociativeArrayPair pair)
/*  [PURPOSE] This routine will remove a key-value pair from an associative
    array and will destroy all storage allocated for the pair.
    <pair> The key-value pair.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/

KAssociativeArrayPair *aa_get_all_pairs (KAssociativeArray aa,
					 unsigned int *num_pairs)
/*  [PURPOSE] This routine will get all the key-value pairs on an associative
    array.
    <aa> The associative array.
    <num_pairs> The number of pairs found is written here. If no pairs are
    found NULL is written here.
    [RETURNS] An array of key-value pairs on success, else NULL. If
    <<num_pairs>> is non-zero, an error occurred.
*/
/*---------------------------------------------------------------------------*/

void aa_get_pair_info (KAssociativeArrayPair pair,
		       void **key, uaddr *key_length,
		       void **value, uaddr *value_length)
/*  [PURPOSE] This routine will get the key and value information for a
    key-value pair in an associative array.
    <pair> The key-value pair.
    <key> The key will be written here.
    <key_length> The length of the key will be written here.
    <value> The value will be written here.
    <value_length> The length of the value will be written here.
    [RETURNS] Nothing.
*/
/*---------------------------------------------------------------------------*/
