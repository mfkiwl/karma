# If extra directories must be searched for libraries, assign them to LIBDIRS.
# This should be a colon separated list.

# The following compiler and linker command variables are created:
#	CC		ANSI C compiler
#	LD		C linker
#	CCpp		C++ compiler
#	LDpp		C++ linker
#	KOPTIMISE	Optimisation flags
#       picflag		Flag(s) required to produce position independent code
#	OS_LIBS		Extra OS-specific libraries that are needed

# The default optimisation flags can be overridden by adding
# KOPTIMISE="-flags" to the make command. You can use this for debugging.

ifeq ($(KARMALIBPATH),/usr/local/karma/lib)
ifdef LIBDIRS
libdirs = $(LIBDIRS)
endif
else
ifdef LIBDIRS
libdirs = $(LIBDIRS):/usr/local/karma/lib
else
# KARMALIBPATH is not the standard: put the standard library in anyway
libdirs = /usr/local/karma/lib
endif
endif

ifdef libdirs
rpath = $(KARMALIBPATH):$(libdirs)
lpath = -L$(KARMALIBPATH) $(addprefix -L,$(subst :, ,$(libdirs)))
else
rpath = $(KARMALIBPATH)
lpath = -L$(KARMALIBPATH)
endif

kcflags = -DOS_$(OS) -DMACHINE_$(MACHINE) -I$(KARMAINCLUDEPATH) $(KOPTIMISE)

ifeq ($(OS),SunOS)
CC   = gcc -fpcc-struct-return $(kcflags) -Wall
LD   = gcc $(lpath)
CCpp = CC $(kcflags)
LDpp = CC $(lpath)
KOPTIMISE = -O2
endif

ifeq ($(OS),Solaris)
ifdef K_NATIVE_COMPILER
CC      = cc -D_REENTRANT $(kcflags)
LD      = cc $(lpath) -Wl,-R,$(rpath)
picflag = -KPIC
KOPTIMISE = -xO2
else
CC   = gcc -fpcc-struct-return -D_REENTRANT $(kcflags) -Wall
LD   = gcc $(lpath) -Wl,-R,$(rpath)
picflag = -fPIC
KOPTIMISE = -O2
endif
CCpp = CC -D_REENTRANT $(kcflags)
LDpp = CC $(lpath) -R$(rpath)
OS_LIBS = -lthread
endif

ifeq ($(OS),Linux)
CC   = cc $(kcflags) -Wall -pedantic-errors
LD   = cc $(lpath) -Wl,-rpath,$(rpath)
CCpp = g++ $(kcflags)
LDpp = g++ $(lpath) -Wl,-rpath,$(rpath)
KOPTIMISE = -O2
OS_LIBS = -lkarmathread
endif

ifeq ($(OS),IRIX5)
ktmpos = IRIX
endif
ifeq ($(OS),IRIX6)
ktmpos = IRIX
endif
ifeq ($(ktmpos),IRIX)
CC   = cc -xansi -signed -D_SGI_MP_SOURCE -$(MACHINE) $(kcflags)
LD   = cc -xansi $(lpath) -$(MACHINE) -rpath $(rpath)
KOPTIMISE = -O2
endif

ifeq ($(OS),OSF1)
# gcc causes problems with shared Xt library ???
# CC   = gcc -fpcc-struct-return -Wall
CC   = cc -std $(kcflags)
LD   = $(CC) $(lpath) -Wl,-rpath,$(rpath)
KOPTIMISE = -O2
endif

ifeq ($(OS),AIX)
CC   = cc -qchars=signed -qlanglvl=ansi $(kcflags)
LD   = cc $(lpath)
KOPTIMISE = -O
endif

ifeq ($(OS),ConvexOS)
CC   = cc -ext $(kcflags)
LD   = $(CC) $(lpath)
KOPTIMISE = -O
endif

ifeq ($(OS),HPUX)
CC   = cc -Aa -D_HPUX_SOURCE $(kcflags)
LD   = cc $(lpath)
KOPTIMISE = -O
endif

ifeq ($(OS),ULTRIX)
CC   = gcc -fpcc-struct-return $(kcflags) -Wall
LD   = gcc $(lpath)
CCpp = g++ -fpcc-struct-return $(kcflags)
LDpp = g++ $(lpath)
KOPTIMISE = -O
endif

ifeq ($(OS),UNICOS)
CC   = cc $(kcflags)
LD   = cc $(lpath)
KOPTIMISE = -h inline3,scalar3,vector2
endif

ifndef CC
CC   = cc $(kcflags)
LD   = cc $(lpath)
KOPTIMISE = -O
endif
