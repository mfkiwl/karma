(signed char **_sh_planes,
		       uaddr *_sh_dim_offsets_v, uaddr *_sh_dim_offsets_h,
		       float _sh_ray_start_d,
		       float _sh_ray_start_v,
		       float _sh_ray_start_h,
		       float _sh_ray_direction_d,
		       float _sh_ray_direction_v,
		       float _sh_ray_direction_h,
		       float _sh_one_on_ray_direction_d,
		       float _sh_min, float _sh_max,
		       double *minimum_image_value,
		       double *maximum_image_value,
		       char *pixel_ptr,
		       RotatedKcoord_3d normal, RotatedKcoord_3d vpc,
		       float t_enter)
/*  This routine will cast one ray in a cube.
    The cube data planes must be pointed to by  _sh_planes  .
    The dimension offset arrays must be pointed to by  _sh_dim_offsets_d
    _sh_dim_offset_v  and  _sh_dim_offsets_h  .
    The start of the ray to cast must be given by  _sh_ray_start_d
    _sh_ray_start_v  and   _sh_ray_start_h  .This point lies on the image plane
    The direction of the ray must be given by  _sh_ray_direction_d
    _sh_ray_direction_v  and  _sh_ray_direction_h  .
    The minimum and maximum plane co-ordinates must be given by  _sh_min  and
    _sh_max  ,respectively.
    The routine returns the number of voxels written to the array.
*/
{
#undef RAYCAST_TERMINATE
#ifndef RAYCAST_TERMINATE
#  define RAYCAST_TERMINATE plane_pos = _sh_plane_stop - _sh_plane_inc
#endif
#undef SHIFT_BITS
#define SHIFT_BITS 16

    /*  Generic variables  */
    int _sh_i_x, _sh_i_y;
    int _sh_i_x_inc, _sh_i_y_inc;
    int _sh_plane_inc, _sh_plane_stop;
    int _sh_i_min = _sh_min;
    int _sh_i_max = _sh_max;
    float _sh_t;
    float _sh_x, _sh_y;
    float _sh_x_inc, _sh_y_inc, _sh_t_inc;
    float _sh_offset = 0.01;
    float _sh_scale = 65536.0;
    extern int skip_factor;

    int plane_pos, voxel;

    /*  Shader specific variables and initialisation  */
